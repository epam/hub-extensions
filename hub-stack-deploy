#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/hub-/hubctl-/g' | sed 's/-/ /g')"
HUB_MANUAL_ELABORATE="${HUB_MANUAL_ELABORATE:-"1"}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_WORKDIR
DOT_ENV="$(files abspath "$HUB_WORKDIR/.env")"
export DOT_ENV

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  color warn "CLI name 'hub' is deprecated. It will be renamed to 'hubctl' in future releases"
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

verb="$(basename "$0" | cut -d- -f3)"

capitalize() {
  echo "$1" | awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}'
}

deprecated_syntax() {
color w <<END
Deprecation notice: this syntax will soon retire:

  $HUB_EXTENSION $1 $2

new syntax:

  $HUB_EXTENSION $3
END
cat <<END
To learn more about new syntax:

  $HUB_EXTENSION --help

END
}

usage() {
cat << END

${verb}s a stack

Usage:

$(capitalize "$verb") entire stack

  $HUB_EXTENSION

$(capitalize "$verb") component foo

  $HUB_EXTENSION foo

$(capitalize "$verb") two components and foo and bar

  $HUB_EXTENSION foo,bar

$(capitalize "$verb") foo and bar and all components in between

  $HUB_EXTENSION foo...bar

$(capitalize "$verb") all components from the first to foo (including)

  $HUB_EXTENSION ...foo

${verb} all components starting from foo till the last

  $HUB_EXTENSION foo...

Parameters:
    --executor            Executor to run automation task, one of: local, docker, kubernetes
    --tty                 Use TTY (terminal) mode for hubctl ${verb}
    --no-tty              Do not use TTY (terminal) mode for hubctl ${verb}
    --verbose  -V         Verbose outputs for debug purpose
    --                    Separator to define "hubctl ${verb}" lower-level parameters (see: "hubctl ${verb} --help")
    --help     -h         Print this message

END
}

is_url() {
  # shellcheck disable=SC2317
  echo "$1" | grep -e '^https\?://' >/dev/null 2>&1
}

maybe_verb=$(basename "$0" | cut -d- -f3)
if test -z "$maybe_verb"; then
  usage
  exit 1
fi
verb="$maybe_verb"

eval "$(dotenv -f "$HUB_WORKDIR/.env" "export")"

FULL_STACK=true
WORKDIR=$(pwd)
HUB_OPTS=
VERBOSE=false

while test "$1" != ""; do
    case $1 in
        -c | --component )
                            deprecated_syntax "$1" "$2" "$2"
                            HUB_COMPONENT="$2"
                            shift
                            ;;
        -o | --offset )     deprecated_syntax "$1" "$2" "$2..."
                            HUB_OPTS="$HUB_OPTS -o $2"
                            FULL_STACK="false"
                            shift
                            ;;
        -l | --limit )      deprecated_syntax "$1" "$2" "...$2"
                            HUB_OPTS="$HUB_OPTS -l $2"
                            FULL_STACK="false"
                            shift
                            ;;
        --tty )             HUB_OPTS="$HUB_OPTS --tty true"
                            ;;
        --no-tty )          HUB_OPTS="$HUB_OPTS --tty false"
                            ;;
        --executor )         shift
                            export HUB_DEPLOY_PROFILE="$1"
                            ;;
        -V | --verbose )    VERBOSE="true"
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        -- )                shift
                            HUB_OPTS="$HUB_OPTS $*"
                            break
                            ;;
        * )
                            if test -z "$HUB_COMPONENT"; then
                              HUB_COMPONENT="$HUB_COMPONENT $1"
                            else
                              printf "Invalid argument: "; color err "$1"
                              usage
                              exit 1
                            fi
    esac
    shift
done

is_url() {
   echo "$1" | grep -e '^https\?://' >/dev/null 2>&1
 }

hub_opts() {
  last=""
  first=""
  limit=""
  offset=""
  components=""
  while test "$1" != ""; do
    if test "$last" = ""; then
      first="$1"
    elif test "$last" = '..' -a "$1" != '..'; then
      limit="-l $1"
      first=""
    elif test "$1" = '..' -a "$last" != '..'; then
      offset="-o $last"
      first=""
    else
      components="$components $first $1"
      first=""
    fi
    last="$1"
    shift
  done
  components=$(echo "$first $components" | xargs | tr ' ' ',')
  if test -n "$components"; then
    components="-c $components"
  fi
  echo $components $offset $limit
}

finalize() {
  status="$(hubctl show -jq '.status.status')"
  printf "Deployment status: "
  if test "$1" = "0"; then
    color green "$status"
    if test "$status" = "incomplete"; then
      color green << EOF
Not an error: status $status means that one or more components have not been deployed
EOF
    fi
  else
    color e << EOF
$status
See error above!
EOF
  fi
}

trap 'finalize $?' EXIT

if test "$VERBOSE" = "true"; then
  export VERBOSE
  set -x
fi

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_MANUAL_ELABORATE="${HUB_MANUAL_ELABORATE:-"1"}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_WORKDIR
DOT_ENV="$(files abspath "$HUB_WORKDIR/.env")"
export DOT_ENV

if test -f $DOT_ENV; then
  eval "$(dotenv -f "$HUB_WORKDIR/.env" "export")"
fi

# deploy expressions
if test -n "$HUB_COMPONENT"; then
  # shellcheck disable=SC2046
  HUB_OPTS="$HUB_OPTS $(hub_opts $(echo "$HUB_COMPONENT" | sed -e "s/\.\.*/\\ .. /g" -e "s/,/\\ /g"))"
  color --bold --color 0 "  This is experimental syntax. Please let us know if old syntax is better for you or something not working"
fi

if test ! -f "$DOT_ENV"; then
color e << EOF
Stack configuration ($DOT_ENV)

To resolve please run:
  hubctl configure -f hub.yaml

To explore more configuration options:
  hubctl configure -f hub.yaml --help
EOF
  exit 1
fi

eval "$(dotenv export -f "$DOT_ENV")"

if test -z "$HUB_FILES"; then
  color e << EOF
Cannot find hubctl definition files (HUB_FILES) in .env"

Probably because stack has not been initialized for deployment yet!

Example:
  hubctl stack init

To explore more configuration options:
  hubctl stack init --help

EOF
  exit 2
fi

if test "$HUB_AUTOCONFIGURE" = "1"; then
  printf "Proceeding with:"; color h "configure"
  hubctl stack configure "$(test "$VERBOSE" = "true" && echo "--verbose")"
  echo "Reloading .env file"
  eval "$(dotenv export -f "$DOT_ENV")"
  printf "Proceeding with: "; color h "$verb"
fi

if test -z "$HUB_DOMAIN_NAME"; then
  HUB_DOMAIN_NAME="$HUB_STACK_NAME"
fi

if test -z "$HUB_DOMAIN_NAME"; then
color e << EOF
Cannot find hubctl definition files (HUB_DOMAIN_NAME) in .env"

Probably because stack has not been configured for deployment yet!

Example:
  $ hubctl stack configure

To explore more configuration options:
  $ hubctl stack configure --help

EOF

  exit 2
fi

cat << EOF
Starting ${verb}:
* Using domain name: $HUB_DOMAIN_NAME
EOF

if test -n "$HUB_KUBECONFIG" -a -f "$HUB_KUBECONFIG"; then
  KUBECONFIG="$HUB_KUBECONFIG"
  export KUBECONFIG
  echo "* Using kubeconfig: $KUBECONFIG"
elif test -n "$KUBECONFIG" -a -f "$KUBECONFIG"; then
  export KUBECONFIG
  echo "* Using kubeconfig: $KUBECONFIG"
fi

HUB=${HUB:-hub}

if test -z "$HUB_STATE"; then
  HUB_STATE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
fi
echo "* Using hubctl state:"
for i in $(echo "$HUB_STATE" | sed "s/,/ /g"); do
  echo "  - $i"
done

if test -z "$HUB_ELABORATE"; then
  HUB_ELABORATE=".hub/$HUB_DOMAIN_NAME.elaborate"
fi
echo "* Using hubctl elaborate:"
for i in $(echo "$HUB_ELABORATE" | sed "s/,/ /g"); do
  echo "  - $i"
  if ! is_url "$i"; then
    HUB_ELABORATE_FILE=$i
  fi
done

if test -n "$HUB_CLOUD_PROVIDER"; then
  echo "* Using cloud: $HUB_CLOUD_PROVIDER"
  HUB_OPTS="--clouds=$HUB_CLOUD_PROVIDER $HUB_OPTS"
fi

if test "$FULL_STACK" = "true" || test -n "$HUB_ELABORATE_FILE" -a ! -e "$HUB_ELABORATE_FILE"; then
  hub-stack-elaborate
elif test -n "$HUB_ELABORATE_FILE"; then
  if ! check-elaborate "$HUB_ELABORATE_FILE" "$HUB_FILES"; then
    if test -z "$HUB_MANUAL_ELABORATE"; then
      echo    "Run this command:"
      color h "    hubctl stack elaborate"
      echo    "or update elaborate file timestamp:"
      echo    "    touch $HUB_ELABORATE_FILE"
      echo
      exit 1
    fi
    hub-stack-elaborate
  fi
fi

export HUB_YAML HUB_FILES HUB_STATE HUB_ELABORATE

# shellcheck disable=SC2086
BEFORE=$(yq -N e .extensions.${verb}.before.[] $HUB_FILES | sort | uniq)
for i in $(echo "$BEFORE" | xargs -n1); do
  if test -x "$i" -a -f "$i"; then
    hook="$i"
  else
    hook=$(files find-in-path "$i/before-${verb}")
    if test -z "$hook"; then
      hook=$(files find-in-path "$i/pre-${verb}")
    fi
  fi
  if test -z "$hook"; then
    color warn "Cannot find pre hook: $i"
    continue
  fi

  printf "Running pre %s hook: " "$verb"
  color bold "$i"
  $hook
done

exe=$(files find-in-path "profiles/$HUB_DEPLOY_PROFILE/${verb}");
if test -z "$lifecycle"; then
  color e << EOF
Cannot find deployment profile: $HUB_DEPLOY_PROFILE

Completed with errors!
EOF
  exit 5
fi

  color green << EOF

Proceeding with: ${verb}
* Using profile: $HUB_DEPLOY_PROFILE
* Running CLI command:

  $ hubctl ${verb} $HUB_ELABORATE -s $HUB_STATE $HUB_OPTS

EOF

# shellcheck disable=SC2086
$lifecycle $VERBOSE "$HUB_ELABORATE" -s "$HUB_STATE" $HUB_OPTS
echo

# shellcheck disable=SC2086
AFTER=$(yq -N e .extensions.${verb}.after.[] $HUB_FILES | sort | uniq)
if test -n "$AFTER"; then
  status="$(hubctl show -jq '.status.status|select(.)')"
  # we execute post-undeploy hook if and only
  # if all component has been undeployed successfully
  # this means stack status beceomes undeployed
  if test "$verb" = "undeploy" -a "$status" != "undeployed"; then
    color w << EOF
Skipping post hooks because status is not undeployed: $status

Due to one more components still being deployed, the post undeploy hook will not be executed.

This hook has been intended to be executed for cleanup after all componets have been undeployed.
EOF
    AFTER=""
  fi
  for i in $(echo "$AFTER" | xargs -n1); do
    if test -x "$i" -a -f "$i"; then
      hook="$i"
    else
      hook=$(files find-in-path "$i/after-${verb}")
      if test -z "$hook"; then
        hook=$(files find-in-path "$i/post-${verb}")
      fi
    fi
    if test -z "$hook"; then
      color warn "Cannot find post hook: $i"
      continue
    fi
    printf "  Running post %s hook: " "$verb"
    color bold "$i"
    $hook
  done
fi
