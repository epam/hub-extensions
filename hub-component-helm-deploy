#!/bin/bash -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


if test -n "$DOMAIN_NAME"; then
    color w "Environment variable: DOMAIN_NAME has been deprecated"
    color w "Use HUB_DOMAIN_NAME instead"
    HUB_DOMAIN_NAME="$DOMAIN_NAME"
    export HUB_DOMAIN_NAME
fi

if test -z "$COMPONENT_NAME" -o -z "$HUB_DOMAIN_NAME" -o -z "$NAMESPACE" -o -z "$HELM_CHART"; then
#  -o -z "$HELM_REPO"
    color w "COMPONENT_NAME, HUB_DOMAIN_NAME, NAMESPACE, HELM_CHART must be set"
fi

if test -z "$HELM_OPTS"; then
    HELM_OPTS="--wait --create-namespace"
fi

charts="$(mktemp -d)"
trap 'rm -rf -- $charts' EXIT

temp_file() {
  # shellcheck disable=SC2002
  echo "$charts/$(cat /dev/urandom | head -c 32 | base64 | tr -dc '[:lower:]')"
}

is_url() {
  echo "$1" | grep -e '^https\?://' >/dev/null 2>&1
}

apply_crd_file() {
    max_di=$(yq e 'di' "$1" | tail -1)
    for i in $(seq 0 "$max_di"); do
        crd=$(yq e "select(di == $i).metadata.name" "$1")
        if test -z "$crd" -o "$crd" = "null"; then
            continue
        fi
        if $kubectl get crd "$crd" > /dev/null; then
            echo "  $crd already exists"
        else
            $kubectl create -f "$1"
        fi
    done
}

helm3="helm"
if which helm3 >/dev/null; then helm3=helm3; fi

kubectl="kubectl --context=$HUB_DOMAIN_NAME --namespace=$NAMESPACE"
helm="$helm3 --kube-context=$HUB_DOMAIN_NAME --namespace=$NAMESPACE"

export kubectl helm

echo "Resolving helm chart: $HELM_CHART"
if is_url "$HELM_CHART"; then
    echo "* Downloading from $HELM_CHART"
    temp=$(temp_file)
    files download "$HELM_CHART" "$temp"
    tar xzf "$temp" -C "$charts"
    dir=$(tar tf "$temp" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
    chart_path="$charts/$dir"
elif test -d "$HELM_CHART"; then
    chart_path="$HELM_CHART"
    echo "* From directory: $chart_path"
elif test -d "charts/$HELM_CHART"; then
    chart_path="charts/$HELM_CHART"
    echo "* From directory: $chart_path"
elif test -f "$HELM_CHART"; then
    echo "* From tarball: $HELM_CHART"
    tar xzf "$HELM_CHART" -C "$charts"
    dir=$(tar tf "$HELM_CHART" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
    chart_path="$charts/$dir"
elif test -f "charts/$HELM_CHART"; then
    echo "* From tarball: $HELM_CHART"
    tar xzf "charts/$HELM_CHART" -C "$charts"
    dir=$(tar tf "charts/$HELM_CHART" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
    chart_path="$charts/$dir"
elif test -d "charts"; then
    echo "* From metadata: $HELM_CHART $HELM_CHART_VERSION"
    for file in charts/*.tgz; do
        if test ! -f "$file"; then continue; fi;
        echo "  chart: $file"
        _name=$(helm show chart "$file" | yq e -M '.name' -)
        _ver=$(helm show chart "$file" | yq e -M '.version' -)
        echo "  chart: $_name version: $_ver"
        if test "$_name" = "$HELM_CHART"; then
            if test -z "$HELM_CHART_VERSION" -o "$HELM_CHART_VERSION" = "$_ver"; then
                echo "  resolved to: $file"
                if test -d "$file"; then
                    chart_path="$file"
                elif test -f "$file"; then
                    tar xzf "$file" -C "$charts"
                    dir=$(tar tf "$file" | grep Chart.yaml | head -n1 | cut -d "/" -f1)
                    chart_path="$charts/$dir"
                    break
                fi
            fi
        fi
    done
elif test -n "$HELM_REPO"; then
    if test -d .charts; then
        charts=.charts
    fi
    $helm repo add stable "https://charts.helm.sh/stable"
    echo "Fetching chart repository: $HELM_REPO"
    if test -n "$HELM_CHART_USERNAME" -a -n "$HELM_CHART_PASSWORD"; then
        HELM_REPO_ARGS="$HELM_REPO_ARGS --username $HELM_CHART_USERNAME --password $HELM_CHART_PASSWORD"
    fi

    echo -n "* Checking if helm repo exists: "
    repo_url="$($helm repo list -o json | jq -cMr --arg repo "$COMPONENT_NAME" '.[]|select(.name == $repo).url')"
    if test -z "$repo_url"; then
        echo "adding"
        # shellcheck disable=SC2086
        $helm repo add "$COMPONENT_NAME" "$HELM_REPO" $HELM_REPO_ARGS
    elif test "$repo_url" = "$HELM_REPO"; then
        echo "arleady exist"
    else
        echo "updating"
        $helm repo remove "$COMPONENT_NAME"
        # shellcheck disable=SC2086
        $helm repo add "$COMPONENT_NAME" "$HELM_REPO" $HELM_REPO_ARGS
    fi
    $helm repo update "$COMPONENT_NAME"

    if test -n "$HELM_CHART_VERSION"; then
        HELM_ARGS="$HELM_ARGS --version $HELM_CHART_VERSION"
    fi
    chart_path=$charts/$(basename "$HELM_CHART")
    rm -rf "$chart_path"
    # shellcheck disable=SC2086
    cat << EOF
Running:
    $helm fetch "$COMPONENT_NAME/$HELM_CHART" $HELM_ARGS --destination $charts --untar
EOF
    $helm fetch "$COMPONENT_NAME/$HELM_CHART" $HELM_ARGS --destination $charts --untar
else
    color e "Cannot find helm chart $HELM_CHART"
    exit 1
fi

# TODO no HELM_HOME in Helm 3
# https://helm.sh/docs/faq/#xdg-base-directory-support
# Helm stores cache, configuration, and data based on the following configuration order:
# - If a HELM_*_HOME environment variable is set, it will be used
# - Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used
# - When no other location is set a default location will be used based on the operating system
#export HELM_HOME=$(pwd)/.helm

echo "Checking namespace: $NAMESPACE"
if ! $kubectl get namespace "$NAMESPACE" -o name > /dev/null;  then
  $kubectl create namespace "$NAMESPACE"
fi

if test -x pre-deploy; then
    echo "Running pre-deploy..."
    pre_deploy=$(CHART_PATH=$chart_path ./pre-deploy)
    helmvars=$(grep -E '^export ' <<<"$pre_deploy" || exit 0)
    if test -n "$helmvars"; then eval "$helmvars"; fi
fi

if test -n "$CRD"; then
    for crd in $CRD; do
        if is_url "$crd"; then
            echo "* Downloading from $crd"
            temp=$(temp_file)
            files download "$crd" "$temp"
            apply_crd_file "$temp"
        elif test -f "$crd"; then
            echo "* Reading from: $crd"
            apply_crd_file "$crd"
        else
            color w "Warning: file not found ($CRD)"
        fi
    done
fi
if test -d "crds"; then
    for file in crds/*.yaml crds/*.yml; do
        if test ! -f "$file"; then continue; fi
        echo "* Reading CRD from: $file"
        apply_crd_file "$file"
    done
fi

if $helm list --failed --pending -q | grep -E "^$COMPONENT_NAME\$"; then
    cat << EOF
Uninstalling helm chart $COMPONENT_NAME
Due to previous state: failed or incomplete

Running helm command:

    $(echo "$helm uninstall $COMPONENT_NAME" | xargs)

EOF
    $helm uninstall "$COMPONENT_NAME"
fi

echo "Resolving helm chart values:"
if test -n "$CHART_VALUES_FILE"; then
    for file in $CHART_VALUES_FILE; do
        if is_url "$file"; then
            color b "  $file (downloading)"
            temp=$(temp_file)
            files download "$file" "$temp"
            HELM_ARGS="$HELM_ARGS --values $temp"
        elif test -f "$chart_path/$file"; then
            color b "  HELM_CHART/$file"
            HELM_ARGS="$HELM_ARGS --values $chart_path/$file"
        else
            color w "* Warning: cannot find file HELM_CHART/$file (ignoring)"
        fi
    done
fi
for file in values.yaml values-*.yaml values.yml values-*.yml $EXTRA_VALUES_FILE; do
    if test ! -f "$file"; then continue; fi
    color b "  $file"
    HELM_ARGS="$HELM_ARGS --values $file";
done
echo "Installing helm chart: $COMPONENT_NAME"

if test -z "$HELM_OPTS"; then
    HELM_OPTS="--create-namespace --wait"
fi

cat << EOF

Running helm command

    $(echo "$helm upgrade $COMPONENT_NAME $chart_path $HELM_ARGS $HELM_OPTS --install" | xargs)

EOF

if test -n "$DEBUG"; then
    # shellcheck disable=SC2086
    $helm template "$COMPONENT_NAME" "$chart_path" $HELM_ARGS $HELM_OPTS | tee charts-dump.yaml
fi

# shellcheck disable=SC2086
$helm upgrade "$COMPONENT_NAME" "$chart_path" $HELM_ARGS $HELM_OPTS --install

if test -x post-deploy; then
    echo "Running post-deploy..."
    ./post-deploy
fi
