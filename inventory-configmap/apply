#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2086,SC2064,SC2046

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH

usage() {
cat << EOF
Kubernetes parameters:
  -k  --kubeconfig        Path to the kubeconfig. If not specified then use default to kubectl
  -c  --kubecontext       Name of Kubernetes context in Kubeconfig file
                          "_" reserved for "current context"
  --current-kubecontext   Use current kubecontext existing
                          configuration (mandatory)

Use: hubctl configure [-c _] or [--current-kubecontext] for current kubecontext

EOF
}

while [ "$1" != "" ]; do
  case "$1" in
    -h | --help )            usage
                             exit 0
                             ;;
  esac
  shift
done

VERBOSE=${VERBOSE:-false}
if test "$VERBOSE" = "true"; then
  set -x
fi

echo "Finalizing stack deployment"

if test ! -f ".env"; then
  echo "Error: cannot find .env file. Please run 'hubctl configure'"
  exit 1
fi
set +a
eval "$(dotenv export -f "$HUB_WORKDIR.env" )"
set -a

if test -n "$HUB_KUBECONTEXT"; then
  echo "* Setting kubecontext to: $HUB_KUBECONTEXT"
  KUBECONTEXT="$HUB_KUBECONTEXT"
  export KUBECONTEXT
fi

if test -f "$HUB_DOMAIN_NAME"; then
  echo "Error: cannot find HUB_DOMAIN_NAME"
  exit 1
fi

if test -z "$HUB_ELABORATE"; then
  echo "Error: cannot find elaborate file: '$HUB_ELABORATE'"
  exit 2
fi

if test -z "$HUB_STATE"; then
  echo "Error: cannot find state file: '$HUB_STATE'"
  exit 2
fi

ns="kube-system"
cm="superhub"
explained=$($HUB explain $HUB_ELABORATE $HUB_STATE --json -g | base64 | tr -d \\n)

echo -n "* Saving state in $ns/$cm configmap: "
if kubectl -n $ns get configmap $cm >/dev/null 2>&1; then
  kubectl -n $ns get configmap $cm -o json |
    jq ".data += {\"${HUB_DOMAIN_NAME}\": \"${explained}\"}" |
    kubectl -n $ns replace -f -
else
  kubectl -n $ns create configmap $cm --from-literal=${HUB_DOMAIN_NAME}=${explained}
fi
