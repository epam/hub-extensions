#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/hub-/hubctl-/g' | sed 's/-/ /g')"
HUB_MANUAL_ELABORATE="${HUB_MANUAL_ELABORATE:-"1"}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
DOT_ENV="$(files abspath "$HUB_WORKDIR/.env")"
export PATH HUB_WORKDIR DOT_ENV

usage() {
cat << EOF
Runs a toolbox as a container and mounts current working directory

Usage:
  $HUB_EXTENSION [DOMAIN_NAME]

Parameters:
    -i  --toolbox-image ARG  Toolbox docker image (default: HUB_TOOLBOX_IMAGE and ghcr.io/epam/hub-toolbox:base)
    -V  --verbose            Verbose outputs for debug purpose
    -h --help                Show this message

EOF
}

TOOLBOX_SHELL="${TOOLBOX_SHELL:-"/bin/sh"}"
ARGS=
while test "$1" != ""; do
    case $1 in
    -i | --toolbox-image)
        shift
        HUB_TOOLBOX_IMAGE="$1"
    ;;
    -V | --verbose )
        set -x
    ;;
    -h | --help )
        usage
        exit
    ;;
    * )
        ARGS="$ARGS $1"
    ;;
    esac
    shift
done

if test -z "$USER"; then
    color err "Error: variable USER has not been defined"
    exit 1
fi

if test -z "$HOME"; then
    color err "Error: variable HOME has not been defined"
    exit 1
fi

if test "$HUB_WORKDIR" = "/"; then
    color err "Errror: cannot mount root (/) directory inside container"
    exit 1
fi

if test -z "$HUB_TOOLBOX_IMAGE"; then
    HUB_TOOLBOX_IMAGE=$(dotenv get "HUB_TOOLBOX_IMAGE" --default "ghcr.io/epam/hub-toolbox:base")
fi

finalize() {
  # shellcheck disable=SC2046
  rv=$1

  rm -rf "$envfile" "$pruned_docker_config_dir"

  # shellcheck disable=SC2086
  exit $rv
}

if test -z "$HUB_WORKDIR"; then
  FIRST_FILE="$(echo "$HUB_FILES" | awk '{print $1;}')"
  if test -f "$FIRST_FILE"; then
    HUB_WORKDIR=$(dirname "$FIRST_FILE")
  else
    HUB_WORKDIR=$(pwd)
  fi
fi

envfile=$(mktemp)
env | grep -E '^(KUBECONFIG|AWS_|GOOGLE_|AZURE_|HUB_|TF_|TERM=|LANG=|LC_)' >"$envfile"
envadd=""
if test -s "$envfile"; then
    envadd="--env-file $envfile"
fi

trap 'finalize $?' EXIT

docker_config="$HOME/.docker/config.json"
if test -f "$docker_config" && grep -E '(osxkeychain|desktop)"' "$docker_config" >/dev/null; then
    pruned_docker_config_dir=$(mktemp -d /tmp/docker.XXXXXX)
    sed -E -e 's/(osxkeychain|desktop)"/"/g' "$docker_config" > "$pruned_docker_config_dir/config.json"
    maybe_docker_config="-v $pruned_docker_config_dir:$HOME/.docker"
fi

if test -e /var/run/docker.sock; then
    maybe_docker_socket="-v /var/run/docker.sock:/var/run/docker.sock"
fi

uid=$(id -u)
gid=$(id -g)
# shellcheck disable=SC2086
docker run \
    --hostname toolbox-"$(tty|sed -e 's|/dev/||')" \
    --user "$uid:$gid" \
    --env TMPDIR="/tmp" \
    --env USER="$USER" \
    --env UID="$uid" \
    --env GID="$gid" \
    --env HOME="$HOME" \
    --env SHELL="$TOOLBOX_SHELL" \
    --env PS1="\u@\e[92m\h\e[0m \w $ " \
    --volume "$HOME:$HOME" \
    --volume "$HUB_WORKDIR:$HUB_WORKDIR" \
    --workdir "$HUB_WORKDIR" \
    $envadd \
    $maybe_docker_socket \
    $maybe_docker_config \
    --privileged \
    --cap-add=NET_ADMIN \
    --rm \
    --interactive \
    --tty \
    "$HUB_TOOLBOX_IMAGE" \
    $ARGS
