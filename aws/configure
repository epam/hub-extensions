#!/bin/bash -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2046,SC2086

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/-/ /g')"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH

usage() {
  cat << EOF
AWS parameters:
  --aws-region               AWS Region (defaults to value from: AWS_REGION)
  --aws-profile              AWS Profile (defaults to value from: AWS_PROFILE)
  --dry-run                  Do not deploy cloud resources, show what will happen
  --domain-name              Custom DNS domain name under existing base domain
  --base-domain-aws-profile  AWS Profile for base domain (in case base domain
                                 hosted zone is located in another AWS account)
  --prefer-local             Save deployment state locally only

Bubble DNS parameters:
  --dns-update  Request to update DNS registration

  New DNS record request:
    --parent-domain       Parent domain for stack (defaults to: bubble.superhub.io)

  Request to update DNS record:
    --domain-name         Previously issued DNS name
    --bubbles-secret-key  Secret key passed during domain name creation

  Use: hubctl configure -r aws --dns-update

EOF
}

BUBBLES_FLAGS=$* # TODO untangle Bubble DNS global vars into function args
DRY_RUN=false
DNS_MANAGER=bubbles
PREFER_LOCAL_STATE=false
while [ "$1" != "" ]; do
  case $1 in
    --aws-region )      shift
                        AWS_REGION="$1"
                        ;;
    --aws-profile )     shift
                        AWS_PROFILE="$1"
                        ;;
    --domain-name )     shift
                        HUB_DOMAIN_NAME="$1"
                        ;;
    --base-domain-aws-profile ) shift
                        HUB_BASE_DOMAIN_AWS_PROFILE="$1"
                        ;;
    --bubbles-secret-key ) shift
                        HUB_DOMAIN_SECRET="$1"
                        ;;
    --prefer-local )    PREFER_LOCAL_STATE=true
                        ;;
    --dns-update )      DNS_ACTION="update"
                        ;;
    --dry-run )         DRY_RUN=true
                        ;;
    --output )          shift
                        DOT_ENV="$1"
                        ;;
    -h | --help )       usage
                        exit
                        ;;
  esac
  shift
done

if test $VERBOSE = "true"; then
  set -x
fi

if test -z "$DOT_ENV"; then
  echo "Error: please run with option: $0 --output FILE"
  exit 2
fi

source $(dirname "$0")/../bubble-dns/include

dotenv="dotenv -f $DOT_ENV"

if test "$DNS_ACTION" = "update"; then
  updateBubbleDNS "$HUB_DOMAIN_NAME" "$HUB_DOMAIN_SECRET"
  exit $?
fi

if test -z "$HUB_DOMAIN_NAME"; then
  configureBubbleDNS
elif test -z "$HUB_DOMAIN_SECRET"; then
  DNS_MANAGER=user
  echo "* Using domain name provided by user: $HUB_DOMAIN_NAME"
fi

# TODO state bucket per region?
echo "Configuring AWS S3"
AWS_PROFILE=${AWS_PROFILE:-$(echo "$AWS_DEFAULT_PROFILE default" | awk '{print $1;}')}
if aws --profile $AWS_PROFILE configure list > /dev/null 2>&1; then
  AWS_OPTS="$AWS_OPTS --profile $AWS_PROFILE"
  echo "* Using AWS profile: $AWS_PROFILE"
else
  unset AWS_DEFAULT_PROFILE AWS_PROFILE
fi

if test -z "$AWS_REGION"; then
  if test -n "$AWS_DEFAULT_REGION"; then
    AWS_REGION="$AWS_DEFAULT_REGION"
    unset AWS_DEFAULT_REGION
  else
    AWS_REGION=$(aws $AWS_OPTS configure get region || echo "us-east-1")
  fi
fi

echo "* Using AWS region: $AWS_REGION"

export AWS_PROFILE AWS_REGION

if test -z "$HUB_STATE_BUCKET"; then
  AWS_ACCOUNT="$(aws $AWS_OPTS sts get-caller-identity --query 'Account' --output text)"
  HUB_STATE_BUCKET="$AWS_ACCOUNT.superhub.io"
fi

echo -n "* Checking presence of bucket $HUB_STATE_BUCKET: "
if aws $AWS_OPTS s3api head-bucket --bucket=$HUB_STATE_BUCKET > /dev/null 2>&1; then
  HUB_STATE_REGION="$(
    aws $AWS_OPTS s3api get-bucket-location \
      --bucket="$HUB_STATE_BUCKET" --query 'LocationConstraint' \
      --output text \
      | sed -e 's/None/us-east-1/g')"
  echo "exist"
else
  if test -z "$HUB_STATE_REGION"; then
    HUB_STATE_REGION="$AWS_REGION"
  fi
  if $DRY_RUN; then
    echo "will be deployed"
  else
    echo "not found"
    echo -n "* Deploying S3 bucket $HUB_STATE_BUCKET in $HUB_STATE_REGION region: "
    $(dirname "$0")/s3-bucket/deploy \
      --bucket-name "$HUB_STATE_BUCKET" \
      --aws-region "$HUB_STATE_REGION" \
      --acl "private"
  fi
fi

echo "Configuring AWS Route53"
echo -n "* Checking presence of hosted zone $HUB_DOMAIN_NAME: "
ZONE_ID=$($(dirname $0)/route53/zone-id --domain-name $HUB_DOMAIN_NAME)
echo "${ZONE_ID:-not found}"

if $DRY_RUN; then
  echo "* Dry run mode detected: skipping Route53 modification"
elif test -z "$ZONE_ID"; then
  printf "* The domain name \"%s\" is not present in the list of hosted zones within the Route 53 service.\n" "$HUB_DOMAIN_NAME"
elif test "$DNS_MANAGER" = "bubbles"; then
  if test -z "$ZONE_ID"; then
    echo -n "* Deploying hosted zone $HUB_DOMAIN_NAME (takes a minute)... "
    $(dirname "$0")/route53/deploy --domain-name "$HUB_DOMAIN_NAME"
  fi
elif test "$DNS_MANAGER" = "user"; then
  if test -n "$HUB_BASE_DOMAIN_AWS_PROFILE"; then
    parent_aws_profile_flag="--aws-profile $HUB_BASE_DOMAIN_AWS_PROFILE"
  fi
  private_zone=$($(dirname "$0")/route53/private-zone --domain-name "$HUB_DOMAIN_NAME")
  if test "$private_zone" != True; then
    PARENT_DOMAIN="$(echo $HUB_DOMAIN_NAME | cut -d. -f2-)"
    echo -n "* Checking presence of parent hosted zone $PARENT_DOMAIN: "
    PARENT_ZONE_ID=$($(dirname "$0")/route53/zone-id --domain-name "$PARENT_DOMAIN" $parent_aws_profile_flag)
    echo "${PARENT_ZONE_ID:-not found}"
  fi
  if test -z "$ZONE_ID"; then
    if test -z "$PARENT_ZONE_ID" -a "$private_zone" != True; then
      cat <<EOF

Error!
Route 53 hosted zone $HUB_DOMAIN_NAME has not been found.

You can resolve this error by logging in https://console.aws.amazon.com/route53/
and creating a hosted zone "$HUB_DOMAIN_NAME" or "$PARENT_DOMAIN".

Then run again:

$ hubctl configure -r aws --domain-name $HUB_DOMAIN_NAME

Abort!
EOF
      exit 5
    fi
    echo -n "* Deploying hosted zone $HUB_DOMAIN_NAME (takes a minute)... "
    $(dirname "$0")/route53/deploy --domain-name "$HUB_DOMAIN_NAME"
    echo "Done"
  fi
  if test -n "$PARENT_ZONE_ID" -a "$private_zone" != True; then
    echo -n "* Updating $HUB_DOMAIN_NAME NS records in $PARENT_DOMAIN / $PARENT_ZONE_ID (takes a minute)... "
    ns=$($(dirname "$0")/route53/nameservers --domain-name "$HUB_DOMAIN_NAME" --json | jq -c '[.[] | {"Value":.}]')
    $(dirname "$0")/route53/upsert \
      --zone-id "$PARENT_ZONE_ID" \
      --record-name "$HUB_DOMAIN_NAME" \
      --record-type NS \
      --record-ttl 300 \
      --record-value "$ns" \
      $parent_aws_profile_flag
    echo "Done"
  fi
  # make sure .env file is up-to-date
  $dotenv set "HUB_DOMAIN_NAME=\"$HUB_DOMAIN_NAME\""
  $dotenv set "HUB_STACK_NAME=\"$(echo "$HUB_DOMAIN_NAME" | cut -f1 -d.)\""
  $dotenv set "HUB_BASE_DOMAIN_NAME=\"$(echo "$HUB_DOMAIN_NAME" | cut -f2- -d.)\""
  if test -n "$HUB_BASE_DOMAIN_AWS_PROFILE"; then
    $dotenv set "HUB_BASE_DOMAIN_AWS_PROFILE=\"$HUB_BASE_DOMAIN_AWS_PROFILE\""
  fi
else
  echo "Error: unsupported DNS operation"
  exit 6
fi

export HUB_CLOUD_PROVIDER=aws
$dotenv set 'HUB_CLOUD_PROVIDER' "aws"
$dotenv contains "$AWS_PROFILE"        || $dotenv set "AWS_PROFILE" "$AWS_PROFILE"
$dotenv contains "$AWS_REGION"         || $dotenv set "AWS_REGION" "$AWS_REGION"
$dotenv contains "$HUB_STATE_BUCKET"   || $dotenv set "HUB_STATE_BUCKET" "$HUB_STATE_BUCKET"
$dotenv contains "$HUB_STATE_REGION"   || $dotenv set "HUB_STATE_REGION" "$HUB_STATE_REGION"

# TODO: currently aws toolbox is not available
if ! $dotenv contains "$HUB_TOOLBOX_IMAGE"; then
  color w "Toolbox image for AWS is not yet available.. using toolbox base image for now"
  $dotenv set "HUB_TOOLBOX_IMAGE" "ghcr.io/epam/hub-toolbox:aws"
fi

if ! $DRY_RUN && test -n "$HUB_DOMAIN_SECRET"; then
  updateBubbleDNS "$HUB_DOMAIN_NAME" "$HUB_DOMAIN_SECRET"
  cat <<EOF
* DNS record has time to live: 72 hours

# Hint! To refresh DNS: hubctl configure -r aws --dns-update

EOF
fi

STACK=${STACK:-$(basename "$(pwd)")}
if test -z "$HUB_STATE"; then
  echo "* Setting hubctl state file location"
  HUB_STATE_FILE=".hub/$HUB_DOMAIN_NAME.state"
  if ! $PREFER_LOCAL_STATE; then
    HUB_STATE_FILE="$HUB_STATE_FILE,s3://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/$STACK/hub.state"
  fi
  $dotenv set "HUB_STATE=\"$HUB_STATE_FILE\""
fi
if test -z "$HUB_ELABORATE"; then
  echo "* Setting hubctl elaborate file location"
  HUB_ELABORATE_FILE=".hub/$HUB_DOMAIN_NAME.elaborate"
  if ! $PREFER_LOCAL_STATE; then
    HUB_ELABORATE_FILE="$HUB_ELABORATE_FILE,s3://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/$STACK/hub.elaborate"
  fi
  $dotenv set "HUB_ELABORATE=\"$HUB_ELABORATE_FILE\""
fi
