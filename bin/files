#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


usage() {
  cat << EOF
commonly used operations with files

Parameters:
  -e --error --fail       Fail with error code instead (otherwise returns empty string)
  --verbose               Verbose output for debugging
  --help                  Print this message

Subcommands:
  $(basename "$0") find-in-path FILE             Returns file locatin in PATH (also can use subdirs)
  $(basename "$0") abspath      FILE             Returns returns absolute location for desired file
  $(basename "$0") relpath      TARGET SOURCE    Returns relative path from source to target
  $(basename "$0") download     URL  DEST        Downloads a remote file
  $(basename "$0") copy         FILE DEST        Copy file utility
  $(basename "$0") download-tar URL  EXTRACT_TO  Downlaods and extracts tarball file

Parameters for download-tar:
  --tar-subpath PATH_INSIDE_TARBALL              Instructs to extract only specific subpath
EOF
}

err=false
op=""
arg=""
while test -n "$1"; do
  case $1 in
    -h | --help )
        usage
        exit ;;
    -e | --fail | --error )
        shift
        err=true
        continue
        ;;
    -V | --verbose )
        shift
        set -x
        continue
    ;;
    find-in-path | abspath )
        op="$1"
        shift
        arg="$1"
        shift
        continue
    ;;
    download | copy | relpath )
        op="$1"
        shift
        arg="$1"
        shift
        arg2="${1:-"."}"
        if test -n "$1"; then
          shift
        fi
        continue
    ;;

    download-tarball | download-tar )
      op="download-tarball"
      shift
      arg="$1"
      shift
      arg2="$1"
    ;;
    --tar-subpath )
      tar_subpath="$2"
      shift
    ;;
    * )
      color e "Error: unknown flag $1"
      usage
      exit 1
      ;;
  esac
  shift
done

# kudos to: https://stackoverflow.com/a/12498485
relpath() {
  source="$(abspath "$2")"
  target="$(abspath "$1")"

  common_part=$source # for now
  result="" # for now

  while test "${target#"$common_part"}" = "${target}"; do
      # no match, means that candidate common part is not correct
      # go up one level (reduce common part)
      common_part="$(dirname "$common_part")"
      # and record that we went back, with correct / handling
      if test -z $result; then
          result=".."
      else
          result="../$result"
      fi
  done

  if test "$common_part" = "/"; then
      # special case for root (no common path)
      result="$result/"
  fi

  # since we now have identified the common part,
  # compute the non-common part
  forward_part="${target#"$common_part"}"
  # and now stick all parts together
  if test -n "$result" -a -n "$forward_part"; then
      result="$result$forward_part"
  elif test -n "$forward_part"; then
      result="$(printf '%s' "$forward_part" | cut -c2-)"
  fi
  echo "$result"
}

abspath() {
  if test -d "$1"; then
    (cd "$1" && pwd)
  elif test -f "$1"; then
    # shellcheck disable=SC2086,SC2046
    echo "$(cd $(dirname $1) && pwd)/$(basename $1)"
  else
    name="$(basename "$1")"
    dir="$(dirname "$1")"
    if test -n "$dir"; then
      echo "$(abspath "$dir")/$name"
    fi
  fi
}

find_in_path() {
  _file="$(echo "$1" | sed -e 's/^\///')"
  ( IFS=:
    for _path in $PATH; do
      if test -x "$_path/$_file"; then
        rv="$_path/$_file"
        break;
      fi
    done
    if test -z "$rv"; then
      if $err; then
        exit 44
      fi
    else
      abspath "$rv"
    fi
  )
}

download_file() {
  http_code=$(
    curl -sLo "$2" -w "%{http_code}" "$1"
  )
  if test "$(echo "$http_code" | cut -c1-1)" != "2"; then
    >&2 color e "Error downloading url: $http_code"
    cat "$temp"
    # shellcheck disable=SC2086
    return $http_code
  fi
  if test ! -s "$2"; then
    >&2 color e "Error: have got empty file (url: $temp)"
    return 1
  fi
}

case "$op"  in
  "find-in-path" )
    PATH=".hub:.hub/bin:$PATH"
    find_in_path "$arg"
  ;;
  "abspath" )
    PATH=".hub:.hub/bin:$PATH"
    abspath "$arg"
  ;;
  "relpath" )
    relpath "$arg" "$arg2"
  ;;
  "download" )
    temp="$(mktemp)"
    trap 'rm -f $temp' EXIT
    download_file "$arg" "$temp"
    files copy "$temp" "$arg2"
  ;;

  "download-tarball" )
    temp="$(mktemp)"
    trap 'rm -f $temp' EXIT
    printf "Downloading %s... " "$arg"
    download_file "$arg" "$temp"
    if test -n "$arg2"; then
      echo " extracting $tar_subpath "
      ROOT=$(tar -tvf "$temp" | awk 'NR==1{print $NF}')
      STRIP=$(echo "$ROOT$tar_subpath" | tr / " " | wc -w | awk '{$1=$1};NF')
      rm -rf "$arg2"
      mkdir -p "$arg2"
      if test "${ROOT##*[^/]}" = '/'; then
        tar -xf "$temp" --strip-components "$STRIP" -C "$arg2" "$ROOT$tar_subpath"
      else
        tar -xf "$temp" -C "$arg2" "*"
      fi
    else
      color e "Error: EXTRACT_TO not provided"
      exit 1
    fi
  ;;

  "copy" )
    copy "$arg" "$arg2"
  ;;
  * )
    usage
    exit 1
esac
