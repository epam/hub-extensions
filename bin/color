#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


usage() {
  cat << EOF
Print colored message (if terminal supports colorings)

Parameters:
  -c --color COLOR_CODE   Use color with this code
  -n                      Do not print the trailing newline character
  +b --bold               Use bold text
  -e --stderr             Write output to stderr instead of stdout
  -V --verbose            For debug purpose
  -h --help               Show this message

Subcommands:
  h or highlight     MSG  Prints bold white
  w, warn or warning MSG  Prints bold yellow
  e, err or error    MSG  Prints bold red
  b, bold            MSG  Prints bold
  g, green           MSG  Prints green

EOF
}

message=""

_tput() {
  if test -t 1; then
    # shellcheck disable=SC2086,SC2048
    tput $*
  fi
}

finalize() {
  if test -t 1; then
    tput sgr0
  fi
}

delay=""
echo="${echo:-"echo"}"
while test -n "$1"; do
  case $1 in
    -h | --help )
      usage
      exit ;;
    -V | --verbose )
      set -x
      shift; continue
    ;;
    -c | --color )
      _tput setaf "$1"
      shift
      shift; continue
    ;;
    -n )
      echo="$echo -n"
      shift; continue
    ;;
    +b | --bold )
      _tput bold
      shift; continue
    ;;
    b | bold )
      _tput bold
      shift
      message="$*"
      break
    ;;
    w | warn | warning )
      _tput setaf 3
      _tput bold
      shift
      stderr="1"
      message="$*"
      delay="2"
      break
    ;;
    -e | --stderr )
      stderr="1"
      shift; continue
    ;;
    e | err | error )
      _tput setaf 1
      _tput bold
      stderr="1"
      shift
      message="$*"
      break
    ;;
    g | green )
      _tput setaf 2
      shift
      message="$*"
      break
    ;;
    h | highlight )
      _tput setaf 7
      _tput bold
      shift
      message="$*"
      break
    ;;
    -- )
      message="$(< /dev/stdin)"
      break
    ;;
    * )
      message="$*"
      break
    ;;
  esac
done

trap finalize EXIT

if test -z "$message" -a ! -t 0; then
    message=$(< /dev/stdin)
fi

if test -z "$stderr"; then
  $echo "$message"
else
  >&2 $echo "$message"
fi

if test -n "$delay"; then
  sleep $delay
fi
