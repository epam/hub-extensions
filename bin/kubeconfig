#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

# shellcheck disable=SC2086,SC2064,SC2046

usage() {
  cat << EOF
Utility to manage kubeconfig

Subcommands:
  $(basename "$0") cp          extract and export one single kubeconfig into the new kubeconfig file
  $(basename "$0") sa          export service account of the running pod into kubeconfig file
  $(basename "$0") test        test connectivity of to the kubernetes cluster
  $(basename "$0") outputs     convert kubeconfig to series of artifacts for terraform outputs

common parameters:
  -f  --kubeconfig  ARG         path to the existing kubeconfig file (default: KUBECONFIG)
  -c  --kubecontext ARG         context in the existing kubeconfig (_  means current; default: _)
  --verbose                     Verbose output for debugging
  --help                        Print this message

cp parameters:
  -o --out  ARG                 path to new kubeconfig (if empty, then output will be to stdout)
  -n --name ARG                 new name for kubecontext (default: HUB_DOMAIN_NAME)
  -e --error                    exit with error if kubeconfig or kubecontext not found

output parameters:
  -p --print-outputs            Print "outputs" header for easier capturing of hub

EOF
}

DOT_ENV=${DOT_ENV:-".env"}
if test -z "$HUB_WORKDIR"; then
  HUB_WORKDIR=$(dotenv get "HUB_WORKDIR" --default "$(pwd)")
fi

HUB_DOMAIN_NAME="${HUB_DOMAIN_NAME:-$(dotenv get HUB_DOMAIN_NAME)}"
KUBECONFIG="${KUBECONFIG:-"$HOME/.kube/config"}"
KUBECONTEXT="_"
OUTPUT="/dev/stdout"

jq="jq -cMr"

while [ "$1" != "" ]; do
  case "$1" in
    cp | sa | test | export | output | outputs | tf-outputs )
      ACTION="$1"
    ;;
    get )
      ACTION="$1"
      PARAMETER="$2"
      shift
      ;;
    --kubeconfig | -f )
      shift
      KUBECONFIG="$1"
      export KUBECONFIG
      ;;
    -c | --kubecontext )
      shift
      KUBECONTEXT="$1"
      ;;
    --name | -n )
      shift
      HUB_DOMAIN_NAME="$1"
      ;;
    -p | --print-outputs )
      PRINT_OUTPUTS="1"
      ;;
    -e | --error )
      fail="1"
    ;;
    -o | --out | --output )
      OUTPUT="$2"
      shift
    ;;
    * )
      color e "Error: invalid argument: $1"
      usage
      exit 1
    ;;
  esac
  shift
done

test_cluster() {
  printf "* Validating kubeconfig... "
  if kubectl cluster-info > /dev/null; then
    echo ok
  else
    exit $?
  fi
}

ktx_username() {
  # shellcheck disable=SC2016
  kubectl config view --raw -o json 2>/dev/null \
  | $jq --arg ktx "$1" '.contexts[] | select(.name == $ktx).context.user'
}

ktx_cluster_name() {
  # shellcheck disable=SC2016
  kubectl config view --raw -o json 2>/dev/null \
    | $jq --arg ktx "$1" '.contexts[] | select(.name == $ktx).context.cluster'
}

ktx_user_json_by_name() {
  # shellcheck disable=SC2016
  kubectl config view --raw -o json 2>/dev/null  \
  | $jq --arg name "$1" '.users[] | select(.name == $name)'
}

ktx_cluster_json_by_name() {
  _ktx_cluster_json_by_name_new_name=
  if test -n "$2"; then
    _ktx_cluster_json_by_name_new_name="$2"
  else
    _ktx_cluster_json_by_name_new_name="$1"
  fi
  # shellcheck disable=SC2016
  kubectl config view --raw -o json 2>/dev/null \
    | $jq --arg old_name "$1" --arg new_name "$_ktx_cluster_json_by_name_new_name" '.clusters[] | select(.name == $old_name) + {"name": $new_name}'
}

get_info() {
  case "$2" in
    kubecontext | context )
      echo "$1"
    ;;
    cluster_name | cluster-name )
      ktx_cluster_name "$1"
    ;;
    server | api_server | api-server )
      _get_info_cluster_name="$(ktx_cluster_name "$1")"
      ktx_cluster_json_by_name "$_get_info_cluster_name" | $jq '.cluster.server | select(.)'
    ;;
    * )
      color e "unknown parameter: $2"
      exit 1
    ;;
  esac
}

export_to_hub() {
  _export_to_hub_cluster_name="$(ktx_cluster_name $1)"
  _export_to_hub_workdir="$HUB_WORKDIR/.hub/kube/$_export_to_hub_cluster_name"
  mkdir -p "$_export_to_hub_workdir"

  _export_to_hub_server="$(ktx_cluster_json_by_name "$_export_to_hub_cluster_name" | $jq '.cluster.server | select(.)')"
  _export_to_hub_user_name="$(ktx_username $1)"

  if test -n "$PRINT_OUTPUTS"; then
  cat << EOF

Outputs:

EOF
  fi

  echo "hub_kubernetes_api_endpoint = \"$_export_to_hub_server\""
  ca_pem="$(ktx_cluster_json_by_name "$_export_to_hub_cluster_name" | $jq '.cluster["certificate-authority-data"] | select(.)')"
  if test -n "$ca_pem"; then
    echo "$ca_pem" > "$_export_to_hub_workdir/ca.pem"
    echo "hub_kubernetes_ca_cert = \"file://$(files abspath "$_export_to_hub_workdir/ca.pem")\""
  else
    echo "hub_kubernetes_ca_cert = \"\""
  fi
  client_pem="$(ktx_user_json_by_name "$_export_to_hub_user_name" | $jq '.user["client-certificate-data"] | select(.)')"
  if test -n "$client_pem"; then
    echo "$client_pem" > "$_export_to_hub_workdir/client.pem"
    echo "hub_kubernetes_client_cert = \"file://$(files abspath "$_export_to_hub_workdir/client.pem")\""
  else
    echo "hub_kubernetes_client_cert = \"\""
  fi

  client_pem="$(ktx_user_json_by_name "$_export_to_hub_user_name" | $jq '.user["client-key-data"] | select(.)')"
  if test -n "$client_pem"; then
    echo "$client_pem" > "$_export_to_hub_workdir/client.pem"
    echo "hub_kubernetes_client_key = \"file://$(files abspath "$_export_to_hub_workdir/client.pem")\""
  else
    echo "hub_kubernetes_client_key = \"\""
  fi
  echo "hub_kubeconfig = \"file://$KUBECONFIG\""
  echo "hub_kubecontext = \"$KUBECONTEXT\""
  if test -n "$PRINT_OUTPUTS"; then
    echo
  fi
}

extract_kubecontext() {
  # Should we test before extract?
  _extract_kubecontext_cluster_name=
  _extract_kubecontext_user_name=
  _extract_kubecontext_new_ktx_name=
  if test -n "$2"; then
    _extract_kubecontext_new_ktx_name="$2"
  else
    _extract_kubecontext_new_ktx_name="$1"
  fi

  _extract_kubecontext_cluster_name="$(ktx_cluster_name $1)"
  _extract_kubecontext_user_name="$(ktx_username $1)"
  if test -n "$_extract_kubecontext_cluster_name" -a -n "$_extract_kubecontext_user_name"; then
    cat <<EOF | $jq > $OUTPUT
{
  "kind": "Config",
  "apiVersion": "v1",
  "preferences": {},
  "clusters": [
    $(ktx_cluster_json_by_name $_extract_kubecontext_cluster_name)
  ],
  "users": [
    $(ktx_user_json_by_name $_extract_kubecontext_user_name)
  ],
  "contexts": [
    {
      "name": "$2",
      "context": {
        "cluster": "$_extract_kubecontext_cluster_name",
        "user": "$_extract_kubecontext_user_name"
      }
    }
  ],
  "current-context": "$_extract_kubecontext_new_ktx_name"
}
EOF
  else
    echo
  fi
}

VERBOSE="${VERBOSE:-false}"
if test "$VERBOSE" = "true"; then
  set -x
fi

if test ! -f "$KUBECONFIG"; then
  echo "* Error kubeconfig: $KUBECONFIG (not found)"
  if test -n "$fail"; then exit 1; fi
fi

if test "$KUBECONTEXT" = "_"; then
  KUBECONTEXT="$(kubectl config current-context 2>/dev/null)"
  if test -z "$KUBECONTEXT"; then
    color e "Error: $KUBECONFIG has no current context"
    if test -n "$fail"; then exit 1; fi
  fi
fi

if test -z "$HUB_DOMAIN_NAME"; then
  HUB_DOMAIN_NAME="$KUBECONTEXT"
fi

case "$ACTION" in
  cp )
    extract_kubecontext "$KUBECONTEXT" "$HUB_DOMAIN_NAME" "$OUTPUT"
  ;;
  test )
    test_cluster "$KUBECONTEXT"
  ;;
  output | outputs | tf-outputs )
    export_to_hubctl "$KUBECONTEXT"
  ;;
  get )
    get_info "$KUBECONTEXT" "$PARAMETER"
  ;;
  * )
    color e "Error: Not implemented yet!"
    exit 44
  ;;
esac
