#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_HOME HUB_EXTENSION

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

CURRENT=""
if test -f "$HUB_WORKDIR/.env"; then
  CURRENT=$(basename "$(readlink "$HUB_WORKDIR/.env")" .env)
fi

if test ! -d "$HUB_WORKDIR/.hub/env"; then
  color e "No stacks available"
  exit 1
fi

TEMP_DIR=$(mktemp -d || exit 2)
mkdir -p "$TEMP_DIR"
trap 'finalize $TEMP_DIR' EXIT

finalize() {
  # shellcheck disable=SC2046
  rv=$?
  if test "$rv" != "0"; then
    # shellcheck disable=SC2045
    for f in $(ls -t "$1"/*.err 2>/dev/null); do
      if test ! -f "$f"; then
        continue
      fi
      color e < "$f"
    done
    color e "Finished wih error. See above for details."
    exit $rv
  fi

  rm -rf "$1"
  exit $rv
}

temp_file() {
  ext="${1:-out}"
  echo "$TEMP_DIR/$(head -c 32 < /dev/urandom | base64 | tr -dc '[:lower:]').$ext"
}

print_stacks() {
  echo "ACTIVE|STACK|STATUS|TIMESTAMP"
  if test -d "$HUB_WORKDIR/.hub/env"; then
    for f in "$HUB_WORKDIR"/.hub/env/*.env "$HUB_WORKDIR"/.hub/env/.env; do
      if test ! -f "$f"; then
        continue
      fi
      star=" "
      name="$(basename "$f" .env)"
      ts=""
      status=""
      hubstate=""
      if test "$CURRENT" = "$name"; then
        star="*"
      fi
      if test "$(basename "$f")" = ".env"; then
        name="initialized"
      fi
      hubstate="$(dotenv -f "$f" get HUB_STATE)"
      HUB_STACK_LS_SUPPRESS_WARN="$(dotenv -f "$f" get HUB_STACK_LS_SUPPRESS_WARN --default 0)"
      if test -n "$hubstate"; then
        err_log="$(temp_file err)"
        out_log="$(temp_file)"
        if test "$HUB_STACK_LS_SUPPRESS_WARN" = "0"; then
          $hubctl explain "$hubstate" --json | jq -cMr '{timestamp: .timestamp|split(".")|first, status: .status}' 1>"$out_log"
        else
          $hubctl explain "$hubstate" --json 2>"$err_log"| jq -cMr '{timestamp: .timestamp|split(".")|first, status: .status}' 1>"$out_log"
        fi
        status=$(jq -cMr '.status' "$out_log")
        ts=$(jq -cMr '.timestamp' "$out_log")
      fi
      if test -z "$status"; then
        status="undeployed"
      fi
      echo "$star|$name|$status|$ts"
    done
  fi
}

result="$(temp_file)"

print_stacks > "$result"
column -t -s"|" < "$result"
