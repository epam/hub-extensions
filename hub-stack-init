#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2016,SC2068,SC2086

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/-/ /g')"

PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_HOME HUB_EXTENSION

HUB_WORKDIR="$(files abspath "$HUB_WORKDIR")"
export HUB_WORKDIR

KNOWN_URLS=""

is_url() {
  echo "$1" | grep -e '^https\?://' >/dev/null 2>&1
}

get_filepath() {
  if is_url "$1"; then
    echo "$HUB_WORKDIR/$(basename "$f")"
  else
    echo "$1"
  fi
}

maybe_download() {
  filepath="$(get_filepath "$1")"
  if test -f "$filepath"; then
    echo "(exists)"
  elif is_url "$1"; then
    files download "$1" "$filepath"
    echo "(downloaded)"
    KNOWN_URLS=$(dirname $1 | xargs)
  else
    for url in $KNOWN_URLS; do
      # shellcheck disable=SC2001
      if files download "$url/$1" "$HUB_WORKDIR/$1"; then
        echo "(downloaded)"
        break
      fi
    done
  fi
  test -f "$filepath"
}

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  color warn "CLI name 'hub' is deprecated. It will be renamed to 'hubctl' in future releases"
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

real_files() {
  for f in $@; do
    if test -f "$f"; then
      printf " %s" "$f"
    fi
  done
  echo
}

toJson() {
  yq e -NM -o=json "$1"
}

# shellcheck disable=SC2120
usage() {
  cat << EOF
Initializes a brand new stack from existing hubctl file

Usage:
  $HUB_EXTENSION [flags] <state-ref>

Example:
  $HUB_EXTENSION
  $HUB_EXTENSION <state-ref>
  $HUB_EXTENSION -f <path-or-url-hub.yaml>
  $HUB_EXTENSION -f <path-or-url-hub.yaml> --force
  $HUB_EXTENSION <state-ref> -f <path-or-url-hub.yaml> --force

State ref:
  State can be referenced as a file, http/https, gs, az or s3 url

EOF

  if test -n "$@"; then
    for req in $@; do
      init=$(files find-in-path "$req/init")
      if test -n "$init"; then
        $init --help
      fi
    done
  fi

  cat <<EOF

Flags:
  -f, --file string           URL (http) or path to stack definition file (can be repeated multiple times)
  --disable-auto-configure    Turn off configure action on deploy
  --force                     Force to overwrite .env file
  -V, --verbose               Verbose outputs for debug purposes
  -h, --help                  Print this message
EOF
}

ident() {
  sed 's/^/  /'
}

finalize() {
  rv="$?"
  rm -rf $@
  # if test "$rv" != "0"; then
  #   color e "Finished wih error!"
  # fi
  exit $rv
}

VERBOSE=false
ARGS=$*
HUB_FILES=""
HUB_AUTOCONFIGURE="${HUB_AUTOCONFIGURE:-1}"
HUB_INTERACTIVE="${HUB_INTERACTIVE:-1}"
bubbles_new_name="$(files -e find-in-path bubble-dns/new-name)"
bubbles_new_domain="$(files -e find-in-path bubble-dns/new)"

while [ "$1" != "" ]; do
  case "$1" in
    -f | --file )
      shift
      HUB_FILES=$(echo "$HUB_FILES $1" | xargs)
      if is_url "$1"; then
        _url="$(dirname "$1")"
        if ! echo "$KNOWN_URLS" | grep -q "$_url"; then
          KNOWN_URLS="$KNOWN_URLS $_url"
        fi
      fi
      ;;
    # -s | --state )
    #   shift
    #   SOURCE_HUB_STATE="$1"
    #   ;;
    --force )
      HUB_USE_FORCE="1"
      ;;
    --disable-auto-configure )
      HUB_AUTOCONFIGURE="0"
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )
      usage
      exit 0
      ;;
    * )
      if test -n "$SOURCE_HUB_STATE"; then
        color e "Error; unknown option $1"
        exit 1
      else
        SOURCE_HUB_STATE="$1"
      fi
      ;;
  esac
  shift
done

if $VERBOSE; then
  set -x
fi

if test -z "$HUB_FILES" -a -f "hub.yaml"; then
  HUB_FILES="hub.yaml"
fi

if test -f "$HUB_WORKDIR/.env" -a -z "$HUB_USE_FORCE"; then
  color error "Error: Stack has been already initialized"
  cat << EOF

Reason: .env file already exists

If this is your intention: try to run the same command with --force flag

EOF
    exit 1
fi

if test -z "$HUB_FILES"; then
  cat << EOF | color e

Error: cannot find hubfile(s)

Example:
  $HUB_EXTENSION -f hub.yaml

EOF
  exit 1
fi

TEMP_DIR=$(mktemp -d || exit 2)
mkdir -p "$TEMP_DIR"
trap 'finalize $TEMP_DIR' EXIT

temp_file() {
  echo "$TEMP_DIR/$(head -c 32 < /dev/urandom | base64 | tr -dc '[:lower:]')"
}

to_json() {
  ext="${1##*.}"
  if test "$ext" = "yaml" -o "$ext" = "yml"; then
    yq -MNo json "$1"
  elif test "$ext" = "json"; then
    jq -cMr "$1"
  else
    color e "Error: unknown file type $ext"
    exit 1
  fi
}

DOT_ENV="$(temp_file)"
EXPANDED=""
export DOT_ENV

expand_hub_files() {
  for f in $@; do
    if test -z "$f"; then continue; fi
    if echo "$EXPANDED" | grep -q "$f"; then continue; fi
    printf "* Checking %s " "$(files relpath "$f" "$HUB_WORKDIR")"
    if test -f "$f"; then
      # is local file
      echo "(exists)"
      EXPANDED=$(echo "$EXPANDED $f" | xargs)
      included="$(to_json "$f" | jq -cMr '.extensions.include|select(.)[]')"
      if test -n "$included"; then
        expand_hub_files $included
      fi
    elif maybe_download "$f"; then
      local_file="$(get_filepath "$f")"
      expand_hub_files "$local_file"
    else
      color e "Error: not found!"
      exit 1
    fi
  done
}

update_symlink() {
  if test -L "$2"; then
    if test "$(readlink -n "$2")" != "$1"; then
      unlink "$2"
    fi
  fi
  if test ! -f "$2"; then
    echo "* Updating symlink: .env"
    ln -sf "$1" "$2"
  fi
}

components() {
  jq -cMr '.components|select(.)[].name|select(.)'
}

componentDir() {
  jq -cMr --arg 'comp' "$1" '.components|select(.)[]|select(.name==$comp).source?.dir | select(.)'
}

componentSourceRepo() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.components|select(.)[] | select(.name==$comp).source?[$src]?.remote | select(.)'
}

componentSourceSubdir() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.components|select(.)[] | select(.name==$comp).source?[$src]?.subDir | select(.)'
}

componentSourceRef() {
  jq -cMr --arg 'src' "$1" --arg 'comp' "$2" '.components|select(.)[] | select(.name==$comp).source?[$src]?.ref | [select(.)]+["__auto__"] | [ .[] | select(.!= "")][0]'
}

getAllComponentHooks() {
  jq -cMr '.components | [select(.)[].hooks|select(.)[].file|select(.)]|unique[]'
}

getDeployHooks() {
  jq -cMr --arg "predicate" "$1" '.extensions.deploy[$predicate]|select(.)[]'
}

getParamFromState() {
  hubctl explain "$1" --json | jq -cMr --arg "param" "$2" '.stackParameters[$param] | select(.)'
}


getParamValueByEnvVar() {
  param="$($params --silent envvar "$2" | jq -cMr '.name')"
  if test -n "$param"; then
    getParamFromState "$1" "$param"
  fi
}

getConfigureScripts() {
  jq -Mr '.extensions.configure|select(.)[]'
}

if test -n "$SOURCE_HUB_STATE"; then
  echo "Initializing stack from: $SOURCE_HUB_STATE"
else
  echo "Initializing a new stack"
fi

printf "Using working directory"
color b "$HUB_WORKDIR"
if test -L "$HUB_WORKDIR/.env"; then
  echo "* Unlinking .env"
  unlink "$HUB_WORKDIR/.env"
elif test -f "$HUB_WORKDIR/.env" ; then
  echo "* Removing .env"
  rm -rf "$HUB_WORKDIR/.env"
fi

expand_hub_files $HUB_FILES
HUB_FILES="$(real_files $EXPANDED | xargs)"
params="params -S"
export HUB_FILES

# mkdir -p "$HUB_WORKDIR/.hub/env"
# if test -x "$HUB_WORKDIR/.hub/before-init"; then
#   echo "Running before init script..."
#   $HUB_WORKDIR/.hub/before-init
# fi

HUB_STACK_REQUIRES="$(yq e '' $HUB_FILES -o json | jq -cMr 'select(.extensions).extensions | select(.init).init[]')"
for req in $HUB_STACK_REQUIRES; do
  init=$(files find-in-path "$req/init")
  if test -x "$HUB_WORKDIR/$req"; then
    color b "* Running init script $req"
    $HUB_WORKDIR/$req $ARGS
  elif test -n "$init"; then
    printf "Initializing "
    color h "$req"
    $init $ARGS
  else
    color w "Cannot find neither init script $req neither extension $req/init"
  fi
done

echo "Resolving stack name"
hub_stack_name_param="$($params env HUB_STACK_NAME | jq -cMr '.name | select(.)')"
if test -z "$hub_stack_name_param"; then
  if test -n "$($params json dns.name)"; then
    hub_stack_name_param="dns.name"
  fi
fi
if test -n "$hub_stack_name_param"; then
  echo "* Using parameter: $hub_stack_name_param"
fi

hub_domain_name_param="$($params env HUB_DOMAIN_NAME | jq -cMr '.name | select(.)')"
if test -z "$hub_domain_name_param"; then
  if test -n "$($params json dns.domain)"; then
    hub_domain_name_param="dns.domain"
  fi
fi
if test -n "$hub_domain_name_param"; then
  echo "* Using parameter: $hub_domain_name_param"
fi

if test -n "$SOURCE_HUB_STATE"; then
  echo "Checking hubctl state"
  for state in $(echo "$SOURCE_HUB_STATE" |tr ',' ' '); do
    temp="$(temp_file)"
    if test -s "$state"; then
      echo "* State file $state: exist"
      HUB_STATE="$HUB_STATE $state"
      #HACK: this is less invasive to the existing code
      cat "$state" > "$temp"
    elif echo "$state" | grep -e '^https\?://' >/dev/null 2>&1; then
      printf "* Downloading from: %s... " "$state"
      if test ! -f "$temp"; then
        files download "$state" "$temp"
      fi
      echo "done"
    elif echo "$state" | grep -e '^gs\?://' >/dev/null 2>&1; then
      printf "* Downloading from: %s... " "$state"
      gsutil -q cp "$state" "$temp"
      echo "done"
    elif echo "$state" | grep -e '^s3\?://' >/dev/null 2>&1; then
      printf "* Downloading from: %s... " "$state"
      aws_profile=$(dotenv get AWS_PROFILE)
      aws_region=$(dotenv get AWS_PROFILE)
      aws s3 cp "$state" "$temp" \
        --profile "$aws_profile" \
        --region "$aws_region"
      echo "done"
    elif echo "${state}" | grep -e '^az\?://' >/dev/null 2>&1; then
      printf "* Downloading from: %s... " "${state}"
      fqn=${state#az://}
      storage_account_name="$(echo "${fqn}" | cut -d'/' -f1)"
      container_name="$(echo "${fqn}" | cut -d'/' -f2)"
      blob_name="$(echo "${fqn}" | cut -d'/' -f3-)"
      az storage blob download --container-name "${container_name}" \
        --name "${blob_name}" \
        --account-name "${storage_account_name}" -o "none" 2>/dev/null \
        --file "${temp}"
      echo "done"
    else
      color e "Error: file not found ${state}"
      exit 13
    fi
    if test -s "$temp"; then
      state_status="$(${hubctl} explain "${temp}" --json | jq -cMr '.status | select(.)')"
      echo "  State status: ${state_status}"
      state_msg="$(${hubctl} explain "${temp}" --json | jq -cMr '.message | select(.)')"
      if test -n "${state_msg}"; then
        echo "  Message: ${state_msg}"
      fi
    fi
    HUB_DOMAIN_NAME=$(getParamFromState "$temp" "$hub_domain_name_param")
    if test -z "$HUB_DOMAIN_NAME"; then
      HUB_DOMAIN_NAME="$(getParamValueByEnvVar "$temp" "HUB_DOMAIN_NAME")"
      if test -z "$HUB_DOMAIN_NAME"; then
        HUB_DOMAIN_NAME="$(getParamValueByEnvVar "$temp" "HUB_STACK_NAME")"
      fi
    fi
    if test -n "$HUB_DOMAIN_NAME"; then
      echo "* Discovered stack name: $HUB_DOMAIN_NAME"
      DOT_ENV="$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"
      echo "  Creaging .hub/env/$HUB_DOMAIN_NAME.env"
      mkdir -p "$(dirname "$DOT_ENV")"
      touch "$DOT_ENV"
      export DOT_ENV
      local_file="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
      if test -f "$local_file"; then
        echo "  State file exist: .hub/$HUB_DOMAIN_NAME.state"
      else
        files copy "$temp" "$local_file"
      fi
      HUB_STATE="$HUB_STATE $local_file $state"
    else
      echo "  Moving on"
    fi
  done
fi

if test -z "$HUB_DOMAIN_NAME"; then
  if test -n "$hub_domain_name_param"; then
    HUB_DOMAIN_NAME="$($params value "$hub_domain_name_param")"
    if test -n "$HUB_DOMAIN_NAME"; then
      echo "* Using domain name: $HUB_DOMAIN_NAME"
    else
      $bubbles_new_domain
      HUB_DOMAIN_NAME="$(dotenv get HUB_DOMAIN_NAME)"
      HUB_STACK_NAME="$(dotenv get HUB_STACK_NAME)"
      export HUB_DOMAIN_NAME HUB_STACK_NAME
    fi
  fi
fi

if test -z "$HUB_STACK_NAME"; then
  if test -n "$hub_stack_name_param"; then
    HUB_STACK_NAME="$($params value "$hub_stack_name_param")"
  fi
  if test -z "$HUB_STACK_NAME" -a -n "$HUB_DOMAIN_NAME"; then
    HUB_STACK_NAME="$(echo "$HUB_DOMAIN_NAME" | cut -d "." -f1)"
  fi
  if test -z "$HUB_STACK_NAME"; then
    HUB_STACK_NAME="$($bubbles_new_name | cut -d "." -f1)"
  fi
fi

if test -n "$HUB_STACK_NAME"; then
  echo "* Using stack name: $HUB_STACK_NAME"
  if test -z "$HUB_DOMAIN_NAME"; then
    HUB_DOMAIN_NAME="$HUB_STACK_NAME"
    echo "* Using domain name same as stack ($HUB_STACK_NAME) for compatibility"
  fi
fi

if test -n "$HUB_STACK_NAME"; then
  dotenv set "HUB_STACK_NAME" "$HUB_STACK_NAME"
fi
if test -n "$HUB_DOMAIN_NAME"; then
  dotenv set "HUB_DOMAIN_NAME" "$HUB_DOMAIN_NAME"
fi

export HUB_STATE

if test -n "$HUB_STATE"; then
  echo "* Checking environment variables from state"
  for env in $($params listenv -f "$HUB_FILES"); do
    param=$($params envvar "$env" | jq -cMr '.name')
    if test -z "$param"; then
      continue
    fi
    for state in $HUB_STATE; do
      if test ! -f $state; then
        continue
      fi

      state_val=$(getParamFromState "$state" "$param")
      if test -n "$state_val"; then
        dotenv set "$env" "$state_val"
        if ! dotenv contains "$env"; then
          echo "  Saving $env to .env file"
        fi
      fi
    done
  done
  # shellcheck disable=SC2046
  eval $(dotenv export -f "$DOT_ENV")
fi

if test -z "$HUB_DOMAIN_NAME"; then
  color e "Error: variable HUB_DOMAIN_NAME is not set"
  exit 1
fi

if test -f "$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" -a -z "$HUB_USE_FORCE" -a -z "$SOURCE_HUB_STATE"; then
  cat <<EOF | color e
Aborting initialize

Reason: $HUB_DOMAIN_NAME stack already exists

If init is your intent you may want to use --force flag.
This may overwrite settings

  hubctl stack init --force

If you want to use the stack then run the following:

  hubctl stack set $HUB_DOMAIN_NAME

EOF
  exit 1
fi

GIT_OPTS="--quiet"
if $VERBOSE; then
  GIT_OPTS=""
fi

echo "Checking hooks"
for hubfile in $HUB_FILES; do
  for hook in $(to_json $hubfile | getConfigureScripts); do
    printf "* Checking configure %s " "$hook"
    if files -e find-in-path "$hook/configure" > /dev/null; then
      echo "(extension)"
    elif maybe_download "$hook"; then
      chmod +x "$hook"
    else
      color w "Warning: $hook not found"
    fi
  done
  for hook in $(to_json $hubfile | getDeployHooks "before"); do
    printf "* Checking deploy before %s " "$hook"
    if files -e find-in-path "$hook/before-deploy" > /dev/null; then
      echo "(extension)"
    elif maybe_download "$hook"; then
      chmod +x "$hook"
    else
      color w "Warning: $hook not found"
    fi
  done
  for hook in $(to_json $hubfile | getDeployHooks "after"); do
    printf "* Checking deploy after %s " "$hook"
    if files -e find-in-path "$hook/after-deploy" > /dev/null; then
      echo "(extension)"
    elif maybe_download "$hook"; then
      chmod +x "$hook"
    else
      color w "Warning: $hook not found"
    fi
  done
  for hook in $(to_json $hubfile | getAllComponentHooks); do
    printf "* Checking component %s " "$hook"
    if maybe_download "$hook"; then
      chmod +x "$hook"
    else
      color w "Warning: $hook not found"
    fi
  done
done

echo "Checking components"
for hubfile in $HUB_FILES; do
  if test ! -f $hubfile; then
    color warn "* Warning: skipping $hubfile due to not found"
    continue
  fi
  # hubfile_dir="$(dirname "$(files abspath "$hubfile")")"
  for comp in $(to_json "$hubfile" | components); do
    printf "* Component %s: " "$comp"
    _dir=$(to_json "$hubfile" | componentDir "$comp")
    # to_json "$hubfile" | componentDir "$comp"
    if test -z "$_dir"; then
      color w "Warning: component $comp has no directory"
      exit 1
    fi
    comp_dir=$(files relpath "$_dir" "$HUB_WORKDIR")

    if test -d "$comp_dir"; then
      echo "exist"
      continue
    fi
    echo "fetching"

    git_repo=$(to_json "$hubfile" | componentSourceRepo "git" "$comp")
    if test -n "$git_repo"; then
      subdir=$(to_json "$hubfile" | componentSourceSubdir "git" "$comp")
      ref=$(to_json "$hubfile" | componentSourceRef "git" "$comp")
      temp_dir=$(temp_file)
      echo "  Retrieving from git source repository"
      echo "  Running: git clone $git_repo"
      mkdir -p "$temp_dir";
      git clone $GIT_OPTS "$git_repo" "$temp_dir" >/dev/null
      (
        cd "$temp_dir";
        git config advice.detachedHead "false" >/dev/null
        head="$(git rev-parse --abbrev-ref HEAD)";
        printf "  Using ref: ";
        if test "$ref" = "__auto__"; then
          color b "$head";
        else
          color b "$ref";
          if test "$head" != "$ref"; then
            git fetch $GIT_OPTS --all --tags >/dev/null;
            git checkout $GIT_OPTS "$ref" >/dev/null;
          fi
        fi
      )

      echo "  Saving component: $comp_dir"
      mkdir -p "$comp_dir"
      cp -rf "$temp_dir/$subdir/." "$comp_dir"
      continue
    fi

    gcp_repo=$(to_json "$hubfile" | componentSourceRepo "gcp" "$comp")
    if test -n "$gcp_repo"; then
      subdir=$(to_json "$hubfile" | componentSourceSubdir "gcp" "$comp")
      ref=$(to_json "$hubfile" | componentSourceRef "gcp" "$comp")
      temp_dir=$(temp_file)
      echo "  Retrieving from gcp source repository"
      echo "  Running: gcloud source repos clone $gcp_repo"
      gcloud --no-user-output-enabled source repos clone "$gcp_repo" "$temp_dir"
      (
        cd "$temp_dir";
        head="$(git rev-parse --abbrev-ref HEAD)";
        printf "  Using ref: ";
        if test "$ref" = "__auto__"; then
          color b "$head";
        else
          color b "$ref";
          if test "$head" != "$ref"; then
            git fetch $GIT_OPTS --all --tags >/dev/null;
            git checkout $GIT_OPTS "$ref" -b "$ref" >/dev/null;
          fi
        fi
      )
      echo "  Saving component: $comp_dir"
      mkdir -p "$HUB_WORKDIR/$comp_dir"
      cp -rf "$temp_dir/$subdir/." "$HUB_WORKDIR/$comp_dir"
      continue
    fi
  done
done
dotenv set "HUB_AUTOCONFIGURE" "$HUB_AUTOCONFIGURE"
dotenv set "HUB_FILES" "$HUB_FILES"
dotenv set "HUB_WORKDIR" "$HUB_WORKDIR"
dotenv set "HUB_TTY" "false"
dotenv set "HUB_INTERACTIVE" "$HUB_INTERACTIVE"
if test -n "$HUB_STATE"; then
  dotenv set "HUB_STATE" "$(echo "$HUB_STATE" | xargs | tr ' ' ',')"
fi
echo "Saving configuration"
temp="$(temp_file)"
HUB_DOMAIN_NAME=$(dotenv -f "DOT_ENV" get "HUB_DOMAIN_NAME" --default "$HUB_DOMAIN_NAME")
dotenv merge -f "$DOT_ENV" -f ".hub/env/$HUB_DOMAIN_NAME.env" > "$temp"
echo "* Saving configuration to .hub/env/$HUB_DOMAIN_NAME.env"
files copy "$temp" "$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" | ident
update_symlink "$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env" "$HUB_WORKDIR/.env"

# if test -x "$HUB_WORKDIR/.hub/after-init"; then
#   export DOT_ENV="$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"
#   color w "Deprecated functionality: after-init will be removed "
#   $HUB_WORKDIR/.hub/after-init
# fi
cat << EOF

Stack has been initialized!

EOF

if test "$HUB_AUTOCONFIGURE" = "0"; then
  cat << EOF | color g
Next step: apply deployment configuration

Run:
  hubctl stack configure

For more details:
  hubctl stack configure --help

EOF
else
  cat << EOF | color g
Next step: start deploy or undeploy operations

Run:
  hubctl stack deploy
or:
  hubctl stack undeploy

For more details:
  hubctl stack deploy --help
  hubctl stack undeploy --help

EOF
fi
