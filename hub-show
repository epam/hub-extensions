#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/

VERBOSE=${VERBOSE:-"false"}
if test "$VERBOSE" = "true"; then
  set -x
fi

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_WORKDIR HUB_HOME

ARGS=

usage()
{
cat << END
Print info about stack in JSON format. Stack parameters and outputs are merged by default with the precedence to the outputs. Execute current script with parameter "-o" to see outputs separately

Usage: hubctl show [COMPONENT]
Parameters:
    -s --state      state file to use (default: $HUB_STATE)
    -f --foramt     json or yaml (default)
    -r --raw        unconverted output from hub
    -h --help       print current message
    --              separator for JQ style arguments see more here: https://stedolan.github.io/jq

Deprecated:
    -c --component  use "hubctl show COMPONENT" instead"
    -q -jq --query  use "hubctl show -- QUERY" instead

END
}

deprecated() {
  color warn <<END

Deprecated: $1

Use instead: $2

END
}

err() {
  printf 'Error: %s' "$1" >&2
  if test -n "$2"; then
    color err "$2"
    echo >&2
    usage >&2
  fi
  exit 1
}

FORMAT="${FORMAT:-yaml}"
hub_state=
while [ "$1" != "" ]; do
    case $1 in
        -c | --component )  deprecated "argument $1 $2" "hubctl show $1"
                            shift
                            hub_state="$1"
                            deprecated
                            ;;
        -s | --state )      shift
                            hub_state="$1"
                            ;;
        -f | --format )     shift
                            FORMAT="$1"
                            ;;
        -r | --raw )        RAW_OUTPUT=1
                            ;;
        -q | -jq |--query ) deprecated "argument $1 $2" "hubctl show -- $2"
                            shift
                            JQ_ARGS="$JQ_ARGS $1"
                            TRANSFORM=1
                            ;;
        -v | --verbose )    set -x
                            ;;
        -- )                shift
                            TRANSFORM=1
                            JQ_ARGS="$JQ_ARGS $*"
                            YQ_ARGS="-M"
                            break
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        * )
          ARGS="$ARGS $1"
          if test -n "$component"; then
            err "unknown option: " "$1"
          fi
          component=$1
          ;;
    esac
    shift
done

component() {
  jq --arg comp "$1" '.components[$comp]|select(.)'
}

to_obj() {
    echo "$1" | jq -cMr \
        'to_entries | .[]
            | {"key": .key | split(".") | reverse, "value": .value}
            | reduce .key[] as $item (.value; {($item): .})';
}

split_obj() {
  jq -cMr 'to_entries | .[]
    | {"key": .key | split(".") | reverse, "value": .value}
    | reduce .key[] as $item (.value; {($item): .})'
}

components() {
  jq '[.components|select(.)|to_entries[]|{name: .key, status: .value.status}.name|select(.)]|sort'
}

get() {
  jq -cM --arg tag "$1" '.[$tag]|select(.)'
}

# deprectated we may not need this function anymore
zip_obj() {
  jq -cM -s 'to_entries | [ .[] | {"key": .key | split("|")[0], "value": .value}] | from_entries'
}

deep_merge() {
  jq -cM -s 'reduce .[] as $item ({}; . * $item)'
}

toyaml() {
  yq e -P 'del(.. | select((tag == "!!map" and length == 0) or (tag == "!!seq" and length == 0) or (. == null)))' -
}

is_component() {
  test -n "$(component "$1")"
}

if test -n "$hub_state"; then
  HUB_STATE="$hub_state"
else
  if test ! -f "$HUB_WORKDIR/.env"; then
    err "cannot find .env file in " "$HUB_WORKDIR"
  fi
  eval "$(dotenv export -f "$HUB_WORKDIR/.env")"
  HUB_STATE="$(dotenv get HUB_STATE --default "$HUB_STATE")"
fi

if test -z "$HUB_STATE"; then
  err "undefined .env variable HUB_STATE"
fi

temp=$(mktemp)
trap 'rm -rf $temp $temp.*' EXIT

hubctl explain "$HUB_STATE" --json > "$temp"

if test -n "$component"; then
  if ! is_component "$component" < "$temp"; then
    error "component not found: " "$component"
  fi
fi

if test ! -z "$RAW_OUTPUT"; then
  if test -z "$component"; then
    if test "$FORMAT" = "yaml"; then
      yq e -P "$temp"
    else
      # shellcheck disable=SC2086
      jq $JQ_ARGS . < "$temp"
    fi
  else
    if test "$FORMAT" = "yaml"; then
      component "$component" < "$temp" | yq e -P
    else
      # shellcheck disable=SC2086
      component "$component" < "$temp"
    fi
  fi
  exit 0
fi


if test -z "$component"; then
  if test "$TRANSFORM" = "1"; then
    get "stackParameters" < "$temp" | split_obj | deep_merge | jq '{"parameters": .}' > "$temp.parameters"
    get "stackOutputs" < "$temp" | split_obj | deep_merge | jq '{"outputs": .}' > "$temp.outputs"
  else
    get "stackParameters" < "$temp" | jq -cM '{"parameters": .}' > "$temp.parameters"
    get "stackOutputs" < "$temp" | jq -cM '{"outputs": .}' > "$temp.outputs"
  fi

  cat << EOF > "$temp.base"
{
  "meta": $(jq '.meta' < "$temp"),
  "components": $(components < "$temp"),
  "status": {
    "status": $(jq '.status' < "$temp"),
    "timestamp": $(jq '.timestamp' < "$temp")
  }
}
EOF
else
  if test -n "$TRANSFORM"; then
    component "$component" < "$temp" | get "parameters" | split_obj | deep_merge  | jq -cM '{"parameters": .}'  > "$temp.parameters"
    component "$component" < "$temp" | get "outputs" | split_obj | deep_merge | jq -cM '{"outputs": .}'  > "$temp.outputs"
  else
    component "$component" < "$temp" | get "parameters" | jq -cM '{"parameters": .}'  > "$temp.parameters"
    component "$component" < "$temp" | get "outputs" | jq -cM '{"outputs": .}'  > "$temp.outputs"
  fi
  cat << EOF > "$temp.base"
{
  "meta": {
    "kind": "component",
    "name": "$component"
  },
  "status": {
    "status": $(component "$component" < "$temp" | jq -cM '.status'),
    "timestamp": $(component "$component" < "$temp" | jq -cM '.timestamp'),
    "message": $(component "$component" < "$temp" | jq -cM '.message')
  }
}
EOF
fi

if test "$FORMAT" = "yaml"; then
  # shellcheck disable=SC2086
  cat "$temp".* | deep_merge | jq $JQ_ARGS | toyaml | yq $YQ_ARGS 'sort_keys(.)'
else
  # shellcheck disable=SC2086
  cat "$temp".* | deep_merge | jq $JQ_ARGS
fi
