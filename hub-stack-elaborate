#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.


HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH

usage() {
cat << EOF

Assemble hub.yaml.elaborate stack deployment manifest from hub.yaml,
params.yaml-s, and hub-components.yaml-s

Usage:
$ hubctl stack elaborate

Parameters:
    -V  --verbose          Verbose outputs for debug purpose
    -h --help              Show this message

EOF
}

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  color warn "CLI name 'hub' is deprecated. It will be renamed to 'hubctl' in future releases"
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

if test ! -f "$HUB_WORKDIR/.env"; then
  color error "Error: cannot find .env file in $HUB_WORKDIR"
  exit 1
fi
eval "$(dotenv export -f "$HUB_WORKDIR/.env")"

HUB_OPTS=
while [ "$1" != "" ]; do
    case $1 in
    -V | --verbose )    set -x
                        ;;
    -h | --help )       usage
                        exit
                        ;;
    --hub-files )       shift
                        HUB_FILES="$1"
                        ;;
    -- )                shift
                        HUB_OPTS="$HUB_OPTS $*"
                        break
                        ;;
    * )                 usage
                        exit 1
    esac
    shift
done

echo "Reconciling deployment plan for $HUB_STACK_NAME"
echo "* Using domain name: $HUB_DOMAIN_NAME"

if test -z "$HUB_FILES"; then
  cat << EOF
Error: cannot find hubctl definition files (HUB_FILES)"

Probably because stack has not been configured for deployment yet!

Example:
  $ hubctl configure -f hub.yaml

EOF

  exit 2
fi

if test -z "$HUB_STATE"; then
  if test -f "$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"; then
    HUB_STATE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
  fi
fi

if test -z "$HUB_ELABORATE"; then
  HUB_ELABORATE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.elaborate"
fi

cat << EOF

Proceeding with: elaborate
* Result will be saved saved to: $HUB_ELABORATE
* Running CLI command:

  $ hubctl elaborate $HUB_FILES -o $HUB_ELABORATE $HUB_OPTS

EOF

verb="elaborate"
script_dir=$(dirname "$0")

# shellcheck disable=SC2086
BEFORE=$(yq -N e .extensions.${verb}.before.[] $HUB_FILES | sort | uniq)
for i in $(echo "$BEFORE" | xargs -n1); do
  if test -f "$HUB_WORKDIR/.hub/$i/before-${verb}"; then
    hook="$HUB_WORKDIR/.hub/$i/before-${verb}"
  elif test -f "$script_dir/$i/before-${verb}"; then
    hook="$script_dir/$i/before-${verb}"
  else
    echo "Warning! cannot find before hook: $i"
    continue
  fi
  echo "Running before ${verb} hook: $i"
  $hook
done


# shellcheck disable=SC2086
$hubctl elaborate $HUB_FILES -o "$HUB_ELABORATE" $HUB_OPTS

# shellcheck disable=SC2086
AFTER=$(yq -N e .extensions.${verb}.after.[] $HUB_FILES | sort | uniq)
for i in $(echo "$AFTER" | xargs -n1); do
  if test -f "$HUB_WORKDIR/.hub/$i/after-${verb}"; then
    hook="$HUB_WORKDIR/.hub/$i/after-${verb}"
  elif test -f "$script_dir/$i/after-${verb}"; then
    hook="$script_dir/$i/after-${verb}"
  else
    echo "Warning! cannot find after hook: $i"
    continue
  fi
  echo "Running after ${verb} hook: $i"
  $hook
done
