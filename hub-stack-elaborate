#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.


verb="elaborate"
HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH HUB_WORKDIR HUB_HOME
DOT_ENV="$(files abspath "$HUB_WORKDIR/.env")"
export DOT_ENV

usage() {
cat << EOF

Assemble hub.yaml.elaborate stack deployment manifest from hub.yaml,
params.yaml-s, and hub-components.yaml-s

Usage:
$ hubctl stack elaborate

Parameters:
    -V  --verbose          Verbose outputs for debug purpose
    -h --help              Show this message

EOF
}

if test ! -f "$DOT_ENV"; then
  color e "* Error: configuration '.env' has not been found"
  exit 1
fi

eval "$(dotenv export -f "$DOT_ENV" )"

HUB_OPTS=
while [ "$1" != "" ]; do
    case $1 in
    -V | --verbose )    set -x
                        ;;
    -h | --help )       usage
                        exit
                        ;;
    --hub-files )       shift
                        HUB_FILES="$1"
                        ;;
    -- )                shift
                        HUB_OPTS="$HUB_OPTS $*"
                        break
                        ;;
    * )                 usage
                        exit 1
    esac
    shift
done

is_abs() {
  case "$1" in
    /*) return 0 ;;
    *) return 1 ;;
  esac
}

find_first() {
  result=
  while test "$1" != "" -a -z "$result"; do
    result="$(files find-in-path "$1")"
    shift
  done
  echo "$result"
}

abs_files() {
  while [ "$1" != "" ]; do
    if test -f "$1"; then
      printf '%s ' "$(files abspath "$1")"
    elif test -f "$HUB_WORKDIR/$1"; then
      printf '%s ' "$(files abspath "$HUB_WORKDIR/$1")"
    else
      color e "Error: file not found: $1"
      exit 1
    fi
    shift
  done
}

rel_files() {
  while [ "$1" != "" ]; do
    if test -f "$1"; then
      printf '%s ' "$(files relpath "$1" "$HUB_WORKDIR")"
    elif test -f "$HUB_WORKDIR/$1"; then
      printf '%s ' "$(files relpath "$HUB_WORKDIR/$1" "$HUB_WORKDIR")"
    else
      color e "Error: file not found: $1"
      exit 1
    fi
    shift
  done
}

printf "Elaborating stack: "; color h "$HUB_STACK_NAME"
# shellcheck disable=SC2086
hub_files=$(abs_files $HUB_FILES)

if test -z "$hub_files"; then
  color err <<END
Error: cannot find hubctl definition files (HUB_FILES)"

Probably because stack has not been configured for deployment yet!

Example:
  $ hubctl configure -f hub.yaml

END
  exit 2
fi

if test -z "$HUB_STATE"; then
  if test -f "$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"; then
    HUB_STATE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
  fi
fi

if test -z "$HUB_ELABORATE"; then
  HUB_ELABORATE="$(files abspath "$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.elaborate")"
  echo "* Setting elaborate file location"
  dotenv -f "$DOT_ENV" set HUB_ELABORATE "$HUB_ELABORATE"
elif ! is_abs "$HUB_ELABORATE"; then
  HUB_ELABORATE="$(files abspath "$HUB_WORKDIR/$HUB_ELABORATE")"
  color warn "* Elaborate file is not absolute path (correcting)"
fi

# shellcheck disable=SC2086
BEFORE=$(yq -N e .extensions.${verb}.before[] $hub_files | sort | uniq)
for i in $(echo "$BEFORE" | xargs -n1); do
  hook="$(find_first "$i" "$i/before-${verb}" "$i/pre-${verb}")"
  if test ! -x "$hook"; then
    color warn "Cannot find hook: $i"
    continue
  fi

  printf "Running pre %s: " "$verb"
  color bold "$(rel_files "$hook")"
  $hook
done


# shellcheck disable=SC2086
color green <<END
* Running CLI command:

  hubctl elaborate $(rel_files $hub_files) $HUB_ELABORATE $HUB_OPTS

END

# shellcheck disable=SC2086
hubctl elaborate $hub_files -o "$HUB_ELABORATE" $HUB_OPTS
dotenv -f "$DOT_ENV" set HUB_ELABORATE "$HUB_ELABORATE"

# shellcheck disable=SC2086
AFTER=$(yq -N e .extensions.${verb}.after[] $hub_files | sort | uniq)
for i in $(echo "$AFTER" | xargs -n1); do
  hook="$(find_first "$i" "$i/after-${verb}" "$i/post-${verb}")"
  if test ! -x "$hook"; then
    color warn "Cannot find hook: $i"
    continue
  fi

  printf "Running post %s: " "$verb"
  color bold "$(rel_files "$hook")"
  $hook
done
