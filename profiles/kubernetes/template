#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

usage() {
    cat << EOF

Emit toolbox pod template

Parameters:
    --label               Use these labels for toolbox pod (can repeat multiple)
    --image               Image of toolbox (default: ghcr.io/epam/hub-toolbox:base)
    -e  --pass-env        Pass environment variables VAR1,VAR2,...
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message
EOF
}

IMAGE=${IMAGE:-ghcr.io\/epam\/hub-toolbox\:base}
NAMESPACE="automation-tasks"
PASS_ENV=
while [ "$1" != "" ]; do
    case $1 in
        --namespace )
          shift
          NAMESPACE=$1
        ;;
        --image )
          shift
          IMAGE=$1
        ;;
        -l | --label )
          shift
          LABELS=$(test -z "$LABELS" echo "$LABELS,$1" && echo "$1")
        ;;
        --exec-id )
          shift
          ID="$1"
        ;;
        --kubeconfig )
          shift
          KUBECONFIG="$1"
          export KUBECONFIG
        ;;
        -e | --pass-env )
          shift
          PASS_ENV=$1
        ;;
        -V | --verbose )
          set -x
        ;;
        -h | --help )
          usage
          exit
        ;;
    esac
    shift
done

dotenv="dotenv -f $HUB_WORKDIR/.env"
pass_env="$(echo "$PASS_ENV" | sed 's/,/|/g')"
cat <<EOF
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: toolbox-$ID
  namespace: $NAMESPACE
  labels:
    provider: epam.com
    app: toolbox
    exec-id: "$ID"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: toolbox-$ID
  labels:
    provider: epam.com
    app: toolbox
    exec-id: "$ID"
subjects:
- kind: ServiceAccount
  name: toolbox-$ID
  namespace: $NAMESPACE
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: toolbox-$ID
  namespace: $NAMESPACE
  labels:
    provider: epam.com
    app: toolbox
    exec-id: "$ID"
spec:
  serviceAccountName: toolbox-$ID
  terminationGracePeriodSeconds: 2
  containers:
  - name: toolbox
    image: $IMAGE
    workingDir: "$(pwd)"
    args: ["sleep", "infinity"]
    env:
    - {name: "USER", value: "$USER"}
    - {name: "UID", value: "$(id -u)"}
    - {name: "GID", value: "$(id -g)"}
    - {name: "HOME", value: "$HOME"}
$(env | grep -E '^GOOGLE_' | grep -Ev '^GOOGLE_APPLICATION_CREDENTIALS' | sed -e 's/^/    - {name: "/' -e 's/=/", value: "/'  -e 's/$/"}/')
$(env | grep -E "^(HUB_EXTENSIONS=|HUB_CRYPTO_|KUBECONFIG=|AWS_(SHARED_CREDENTIALS_FILE|CONFIG_FILE|PROFILE)=|AZURE_|ARM_|TF_|TERM=|LANG=|LC_)|^($pass_env)=" | sed -e 's/^/    - {name: "/' -e 's/=/", value: "/'  -e 's/$/"}/')
$($dotenv keys | grep -Ev '^(HUB_DEPLOY_PROFILE|GOOGLE_APPLICATION_CREDENTIALS|KUBECONFIG|HUB_KUBECONFIG|HUB_STATE|HUB_ELABORATE|HUB_WORKDIR)' | while read -r key ; do echo '    - {name: "'"$key"'", value: "'"$($dotenv get "$key")"'"}' ; done)
    - {name: "HUB_DEPLOY_PROFILE", value: "kubernetes"}
    volumeMounts:
    - name: work-dir
      mountPath: $(pwd)
    - name: home-dir
      mountPath: $HOME
  securityContext:
    runAsUser: 0
    fsGroup: $(id -g)
  volumes:
  - name: work-dir
    emptyDir: {}
  - name: home-dir
    emptyDir: {}
EOF
