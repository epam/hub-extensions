#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

# A wrapper around `hub` however it will use pod (see ./template)

usage() {
    cat << EOF

Launch Hub CTL in a Toolbox pod

Parameters:
    -i  --image.......Image of toolbox (default: ghcr.io/epam/hub-toolbox:base)
    -s  --state.......State file will be pass as -s flag to hubctl
    -e  --pass-env    Pass environment variables VAR1,VAR2,...
    -V  --verbose     Verbose outputs for debug purpose
    -h  --help        Print this message
EOF
}

HUB_ARGS=
PASS_ENV=
VERBOSE=
while test "$1" != ""; do
  case $1 in
    -i | --image )
      shift
      HUB_TOOLBOX_IMAGE=$1
    ;;
    -s | --state )
      shift
      STATE_FILE=$1
      HUB_ARGS="$HUB_ARGS -s $STATE_FILE"
    ;;
    -e | --pass-env )
      shift
      PASS_ENV="--pass-env $1"
    ;;
    -V | --verbose )
      VERBOSE="true"
    ;;
    -h | --help )
      usage
      exit
    ;;
    * )
      HUB_ARGS="$HUB_ARGS $1"
    ;;
  esac
  shift
done

if test "$VERBOSE" = "true"; then
  set -x
  VERBOSE="--verbose"
fi

gen_random() {
  size="${1:-32}"
  (
    LC_ALL=C tr -dc a-z0-9 < /dev/urandom | head -c "$size" | xargs
  )
}


if test ! -f "$HUB_WORKDIR/.env"; then
  color error "Error: cannot find .env file in $HUB_WORKDIR"
  exit 1
fi
eval "$(dotenv export -f "$HUB_WORKDIR/.env")"

TOOLBOX_NAMESPACE=${TOOLBOX_NAMESPACE:-hubctl}
kubectl="kubectl -n $TOOLBOX_NAMESPACE"
ID=$(gen_random 8)

finalize() {
  rv=$?
  echo
  echo "Stand by while gracefully terminating toolbox-$ID"
  set +e
  # TODO: $kubectl exec "toolbox-$ID" -- tar cf - STATE_FILEs | tar xf - -C STATE_FILEs
  # Will be better but harder to implement
  state_file="$(echo "$STATE_FILE" | sed 's/,/ /g')"
  for f in $state_file; do
    if ! echo "$f" | grep -F :// >/dev/null; then
      printf "* Downloading hubctl state to %s: " "$(basename "$f")"
      $kubectl cp "toolbox-$ID:$f" "$f" >/dev/null 2>&1
      echo "Done"
    fi
  done
  set -e
  printf "* Cleaning toolbox-%s: " "$ID"
  kubectl delete -f "$1" >/dev/null
  echo "Done"
  rm -f "$1"
  if test "$rv" != "0"; then
    echo "Aborted!"
  fi
}

if test -z "$HUB_TOOLBOX_IMAGE"; then
    HUB_TOOLBOX_IMAGE=$(dotenv get "HUB_TOOLBOX_IMAGE" --default "ghcr.io/epam/hub-toolbox:base")
fi

if test -z "$HUB_EXTENSIONS"; then
  if test -n "$HOME"; then
    HUB_EXTENSIONS="$HOME/.hub"
  else
    # shellcheck disable=SC2088
    HUB_EXTENSIONS="~/.hub"
  fi
fi

echo "Starting toolbox pod: toolbox-$ID"
temp=$(mktemp)

hub_kubeconfig=${HUB_KUBECONFIG:-$KUBECONFIG}
if test -n "$hub_kubeconfig"; then
  echo "* Using kubeconfig: $hub_kubeconfig"
  hub_kubeconfig_flag="--kubeconfig $hub_kubeconfig"
fi
# shellcheck disable=SC2086
"$(dirname "$0")/template" \
  $PASS_ENV \
  $VERBOSE \
  --image "$HUB_TOOLBOX_IMAGE" \
  --exec-id "$ID" \
  $hub_kubeconfig_flag \
  --namespace "$TOOLBOX_NAMESPACE" > "$temp"

yq < "$temp"

printf "* Checking presence of %s namespace: " "$TOOLBOX_NAMESPACE"
if ! kubectl get namespace "$TOOLBOX_NAMESPACE" -o "name" 2>/dev/null; then
  echo "not found"
  printf "  Deploying namespace: "
  kubectl create namespace "$TOOLBOX_NAMESPACE"
fi

printf "* Scheduling a pod toolbox-%s: " "$ID"
if $kubectl -f "$temp" apply >/dev/null; then
  echo "Done"
else
  exit $?
fi

# shellcheck disable=SC2064
trap "finalize $temp" EXIT

printf "* Starting pod toolbox-%s: " "$ID"
$kubectl wait "pod/toolbox-$ID" \
  --for=condition=Ready \
  --timeout=1200s
# let entrypoint to finish
sleep 2

if test -n "$TOOLBOX_APK_ADD"; then
  echo "* Adding APK $TOOLBOX_APK_ADD:"
  $kubectl exec -i "toolbox-$ID" -- sh -c "apk update && apk add --no-cache $TOOLBOX_APK_ADD"
fi

# set ownership of (nested) emptyDir volumes
$kubectl exec -i "toolbox-$ID" -- chown -R "$(id -u):$(id -g)" "$HOME"

# this do not archive directories thus no directory permissions are restored
printf "* Synchronizing working directory (may take a while): "
find -L "." \
  -type f \
  ! -path '*/.git/*' \
  ! -path '*/.helm/*' \
  ! -path '*/.terraform/*' \
  ! -path '*/.cache/*' \
  ! -path './.envrc' \
  ! -path './.env' \
  ! -path './.kubeconfig' \
  -print0 \
  | tar cz --null -T - \
  | $kubectl exec -i "toolbox-$ID" -- tar xz
echo "Done"

if test -n "$HUB_CLOUD_PROVIDER"; then
  printf "* Mounting %s credentials: " "$HUB_CLOUD_PROVIDER"
  case "$HUB_CLOUD_PROVIDER" in
    "aws" )
      "$(dirname "$0")/aws" \
        --namespace "$TOOLBOX_NAMESPACE" \
        --pod "toolbox-$ID" && echo "Done"
    ;;

    "azure" )
      if env | grep -E '^(AZURE|ARM)_' >/dev/null; then
        echo "found $(env | grep -E '^(AZURE|ARM)_' | cut -d= -f1 | sort | xargs)"
      else
        echo "no AZURE_* nor ARM_* vars set"
      fi
    ;;

    * )
      echo "Warning: $HUB_CLOUD_PROVIDER provider not yet supported!"
    ;;
  esac
fi

if test -n "$TOOLBOX_HUB_CLI_REPLACEMENT" -a -f "$TOOLBOX_HUB_CLI_REPLACEMENT"; then
  printf "* Replacing Hub CLI binary: "
  gzip -c "$TOOLBOX_HUB_CLI_REPLACEMENT" \
    | $kubectl exec -i "toolbox-$ID" -- sh -c "gzip -dc >hubctl; chmod +x hubctl"
  echo "Done"
fi

if test -d "$HUB_EXTENSIONS"; then
  printf "* Synchronizing Hub CLI extensions from %s: " "$HUB_EXTENSIONS"
  $kubectl exec -i "toolbox-$ID" -- mkdir -p "$HUB_EXTENSIONS"
  find -L "$HUB_EXTENSIONS" -type f ! -path '*/.git/*' ! -path '*/node_modules/*' -print0 \
    | tar cz -P --null -T -\
    | $kubectl exec -i "toolbox-$ID" -- tar xz -C / 2>/dev/null
  echo "Done"
fi

maybe_tty=
if test -t 0; then
  maybe_tty=t
fi
printf "* Executing: "
# shellcheck disable=SC2086
echo "$kubectl exec -i$maybe_tty "toolbox-$ID" -- sh -c \"PATH=/usr/local/share/hub/bin:\$HUB_WORKDIR:\$HUB_WORKDIR/bin:\$PATH; hubctl $HUB_ARGS\""
# shellcheck disable=SC2086
$kubectl exec -i$maybe_tty "toolbox-$ID" -- sh -c "PATH=/usr/local/share/hub/bin:\$HUB_WORKDIR:\$HUB_WORKDIR/bin:\$PATH; hubctl $HUB_ARGS"
