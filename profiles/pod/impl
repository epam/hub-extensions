#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
# 
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# A wrapper around `hub` however it will use pod (see ./template)

set -o pipefail

usage() {
    cat << EOF

Launch Hub CLI in a Toolbox pod

Parameters:
    -V  --verbose         Verbose outputs for debug purpose
    -h  --help            Print this message
EOF
}

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

if test -f ".env"; then
  eval "$(dotenv -f $HUB_WORKDIR/.env export -f ".env" )"
fi

TOOLBOX_NAMESPACE=${TOOLBOX_NAMESPACE:-automation-tasks}
ID=$(uuidgen | tr '[:upper:]' '[:lower:]' | tr -d - | cut -c-8)

HUB_ARGS=
PASS_ENV=
while [ "$1" != "" ]; do
  case $1 in
    -s | --state )
      shift
      STATE_FILE=$1
      HUB_ARGS="$HUB_ARGS -s $STATE_FILE"
    ;;
    -e | --pass-env )
      shift
      PASS_ENV="--pass-env $1"
    ;;
    -V | --verbose )
      set -x
    ;;
    -h | --help )
      usage
      exit
    ;;
    * )
      HUB_ARGS="$HUB_ARGS $1"
    ;;
  esac
  shift
done

finalize() {
  rv=$?
  echo
  echo "Stand by while gracefully terminating toolbox-$ID"
  set +e
  # TODO: $kubectl exec "toolbox-$ID" -- tar cf - STATE_FILEs | tar xf - -C STATE_FILEs
  # Will be better but harder to implement
  for f in ${STATE_FILE//,/ }; do
    if ! echo "$f" | grep -F :// >/dev/null; then
      echo -n "* Downloading hubctl state to $(basename "$f"): "
      $kubectl cp "toolbox-$ID:$f" "$f" >/dev/null 2>&1
      echo "Done"
    fi
  done
  set -e
  echo -n "* Cleaning toolbox-$ID: "
  kubectl delete -f "$1" >/dev/null
  echo "Done"
  rm -f "$1"
  if test "$rv" != "0"; then
    echo "Aborted!"
  fi
}

if test -z "$HUB_EXTENSIONS"; then
  if test -n "$HOME"; then
    HUB_EXTENSIONS="$HOME/.hub"
  else
    # shellcheck disable=SC2088
    HUB_EXTENSIONS="~/.hub"
  fi
fi

echo "Starting toolbox pod: toolbox-$ID"
temp=$(mktemp)

hub_kubeconfig=${HUB_KUBECONFIG:-$KUBECONFIG}
if test -n "$hub_kubeconfig"; then
  echo "* Using kubeconfig: $hub_kubeconfig"
  hub_kubeconfig_flag="--kubeconfig $hub_kubeconfig"
fi
# shellcheck disable=SC2086
"$(dirname "$0")/template" \
  $PASS_ENV \
  --exec-id "$ID" \
  $hub_kubeconfig_flag \
  --namespace "$TOOLBOX_NAMESPACE" > "$temp"

kubectl="kubectl -n $TOOLBOX_NAMESPACE"
echo -n "* Checking presence of $TOOLBOX_NAMESPACE: "
if ! kubectl get namespace "$TOOLBOX_NAMESPACE" -o "name" 2>/dev/null; then
  echo "not found"
  echo -n "Deploying namespace: "
  kubectl create namespace "$TOOLBOX_NAMESPACE"
fi

echo -n "* Scheduling a pod toolbox-$ID: "
if $kubectl -f "$temp" apply >/dev/null; then
  echo "Done"
else
  exit $?
fi

# shellcheck disable=SC2064
trap "finalize $temp" EXIT

echo -n "* Starting pod toolbox-$ID: "
$kubectl wait "pod/toolbox-$ID" \
  --for=condition=Ready \
  --timeout=1200s
# let entrypoint to finish
sleep 2

if test -n "$TOOLBOX_APK_ADD"; then
  echo "* Adding APK $TOOLBOX_APK_ADD:"
  $kubectl exec -i "toolbox-$ID" -- sh -c "apk update && apk add --no-cache $TOOLBOX_APK_ADD"
fi

# set ownership of (nested) emptyDir volumes
$kubectl exec -i "toolbox-$ID" -- chown -R $(id -u):$(id -g) "$HOME"

# this do not archive directories thus no directory permissions are restored
echo -n "* Synchronizing working directory (may take a while): "
find -L "." \
  -type f \
  ! -path '*/.git/*' \
  ! -path '*/.helm/*' \
  ! -path '*/.terraform/*' \
  ! -path '*/.cache/*' \
  ! -path './.envrc' \
  ! -path './.env' \
  ! -path './.kubeconfig' \
  -print0 \
  | tar cz --null -T - \
  | $kubectl exec -i "toolbox-$ID" -- gosu "$USER" tar xz
echo "Done"

if test -n "$HUB_CLOUD_PROVIDER"; then
  echo -n "* Mounting $HUB_CLOUD_PROVIDER credentials: "
  case "$HUB_CLOUD_PROVIDER" in
    "aws" )
      "$(dirname "$0")/aws" \
        --namespace "$TOOLBOX_NAMESPACE" \
        --pod "toolbox-$ID" && echo "Done"
    ;;

    "azure" )
      if env | grep -E '^(AZURE|ARM)_' >/dev/null; then
        echo "found $(env | grep -E '^(AZURE|ARM)_' | cut -d= -f1 | sort | xargs)"
      else
        echo "no AZURE_* nor ARM_* vars set"
      fi
    ;;

    * )
      echo "Warning: $HUB_CLOUD_PROVIDER provider not yet supported!"
    ;;
  esac
fi

hub=hub
if test -n "$TOOLBOX_HUB_CLI_REPLACEMENT" -a -f "$TOOLBOX_HUB_CLI_REPLACEMENT"; then
  echo -n "* Replacing Hub CLI binary: "
  gzip -c "$TOOLBOX_HUB_CLI_REPLACEMENT" \
    | $kubectl exec -i "toolbox-$ID" -- sh -c "gzip -dc >hub; chmod +x hub"
  echo "Done"
  hub=./hub
fi

if test -d "$HUB_EXTENSIONS"; then
  echo -n "* Synchronizing Hub CLI extensions from $HUB_EXTENSIONS: "
  $kubectl exec -i "toolbox-$ID" -- gosu "$USER" mkdir -p "$HUB_EXTENSIONS"
  find -L "$HUB_EXTENSIONS" -type f ! -path '*/.git/*' ! -path '*/node_modules/*' -print0 \
    | tar cz -P --null -T -\
    | $kubectl exec -i "toolbox-$ID" -- gosu "$USER" tar xz -C / 2>/dev/null
  echo "Done"
fi

maybe_tty=
if test -t 0; then
  maybe_tty=t
fi
echo -n "* Executing: "
# shellcheck disable=SC2086
echo $kubectl exec -i$maybe_tty "toolbox-$ID" -- gosu "$USER" tini -s -- $hubctl $HUB_ARGS
# shellcheck disable=SC2086
$kubectl exec -i$maybe_tty "toolbox-$ID" -- gosu "$USER" tini -s -- $hubctl $HUB_ARGS
