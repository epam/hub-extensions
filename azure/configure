#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.

usage() {
  cat << EOF
Azure parameters:
  --azure-region                Azure Region (defaults to value from: AZURE_REGION, AZURE_DEFAULTS_LOCATION)
  --azure-resource-group        Azure Resource Group (defaults to value from: AZURE_RESOURCE_GROUP_NAME, AZURE_DEFAULTS_GROUP)
  --azure-subscription          Azure Subscription (defaults to value from: AZURE_SUBSCRIPTION_ID, ARM_SUBSCRIPTION_ID)
  --dry-run                     Do not deploy cloud resources, show what will happen
  --domain-name                 Custom DNS domain name under existing base domain
  --prefer-local                Save deployment state locally only

Bubble DNS parameters:
  New DNS record request:
    --parent-domain       Parent domain for stack (defaults to: epam.devops.delivery)

  Request to update DNS record:
    --domain-name         Previously issued DNS name
    --bubbles-secret-key  Secret key passed during domain name creation

  Use: hubctl configure -r azure --dns-update

EOF
}

DRY_RUN=false
DNS_MANAGER=bubbles
PREFER_LOCAL_STATE=false
while [ "$1" != "" ]; do
  case $1 in
    --azure-region )          shift
                              AZURE_REGION="$1"
                              ;;
    --azure-resource-group )  shift
                              AZURE_RESOURCE_GROUP_NAME="$1"
                              ;;
    --azure-subscription )    shift
                              AZURE_SUBSCRIPTION_ID="$1"
                              ;;
    --domain-name )           shift
                              HUB_DOMAIN_NAME="$1"
                              ;;
    --bubbles-secret-key )    shift
                              HUB_DOMAIN_SECRET="$1"
                              ;;
    --prefer-local )          PREFER_LOCAL_STATE=true
                              ;;
    --dry-run )               DRY_RUN=true
                              ;;
    --output )                shift
                              DOT_ENV="$1"
                              ;;
    -h | --help )             usage
                              exit
                              ;;
  esac
  shift
done

AZ_OPTS=
if test "$VERBOSE" = "true"; then
  AZ_OPTS="--verbose"
  set -x
fi

if test -z "$DOT_ENV"; then
  color error "Error: please run with option: $0 --output FILE"
  exit 2
fi
jq="jq -cMr"
dotenv="dotenv -f $DOT_ENV"

ident() {
  sed 's/^/  /'
}

getParamFromState() {
  # shellcheck disable=SC2016
  hubctl explain "$1" --json | $jq --arg "param" "$2" '.stackParameters[$param] | select(.)'
}

getParamValueByEnvVar() {
  _getParamValueByEnvVar_param="$(params envvar "$2" | jq -cMr '.name')"
  if test -n "$_getParamValueByEnvVar_param"; then
    getParamFromState "$1" "$_getParamValueByEnvVar_param"
  fi
}

param_name() {
  _param_name_result="$(params env "$1" | jq -r '.name | select(.)')"
  if test -z "$_param_name_result" -a -n "$2"; then
    _param_name_result="$(params json "$2" | jq -r '.name | select(.)')"
  fi
  echo "$_param_name_result"
}

stackname_param="$(param_name HUB_STACK_NAME dns.name)"
has_dnsdomain_param="$(param_name HUB_DOMAIN_NAME dns.domain)"
# hubfile does not have "dns.domain"
if test -z "$has_dnsdomain_param"; then
  # in this case we don't want bubble dns to autogenerate
  DNS_MANAGER="user"
  if test -n "$stackname_param"; then
    # taking dns.domain from stack name
    HUB_STACK_NAME="$(params value "$stackname_param" -d "$DOT_ENV" -d "$HUB_WORKDIR/.env")"
    if test -n "$HUB_STACK_NAME"; then
      printf "Using stack name: "
      color b "$HUB_STACK_NAME"
      HUB_DOMAIN_NAME="$HUB_STACK_NAME"
    else
      printf "Generating new stack name: "
      new_name="$(files find-in-path bubble-dns/new-name)"
      HUB_STACK_NAME="$(eval "$new_name" | cut -d. -f1)"
      color b "$HUB_STACK_NAME"
      echo "* Saving also as HUB_DOMAIN_NAME for compatibiltiy"
      HUB_DOMAIN_NAME="$HUB_STACK_NAME"
      cat << EOF | color g
If you want to enable domain name generation. Please add following parameter to your hubfile
- name: dns.domain
  fromEnv: HUB_DOMAIN_NAME
EOF
    fi
  fi
fi

if test -z "$HUB_DOMAIN_NAME"; then
  color error "Error: cannot find HUB_DOMAIN_NAME. This looks like a bug. Please report it."
  exit 1
fi

if dotenv contains HUB_DOMAIN_SECRET; then
  DNS_MANAGER=bubbles
  printf "* Using domain name provided by bubbles dns: ";
  color b "$HUB_DOMAIN_NAME"
else
  DNS_MANAGER=user
  printf "* Using domain name provided by user: ";
  color b "$HUB_DOMAIN_NAME"
fi

if test -n "$AZURE_SUBSCRIPTION_ID"; then
  echo "* Using Azure subscription from AZURE_SUBSCRIPTION_ID"
  AZ_OPTS="$AZ_OPTS --subscription $AZURE_SUBSCRIPTION_ID"
else
  AZURE_SUBSCRIPTION_ID="$(params value 'azure.azureSubscriptionId')"
  if test -z "$AZURE_SUBSCRIPTION_ID"; then
    subscription_param="$(param_name AZURE_SUBSCRIPTION_ID)"
    if test -n "$subscription_param"; then
      AZURE_SUBSCRIPTION_ID="$(params value "$subscription_param")"
    fi
    if test -z "$AZURE_SUBSCRIPTION_ID"; then
      subscription_param="$(param_name ARM_SUBSCRIPTION_ID)"
      if test -n "$subscription_param"; then
        AZURE_SUBSCRIPTION_ID="$(params value "$subscription_param")"
      fi
    fi
  fi
  if test -n "$AZURE_SUBSCRIPTION_ID"; then
    echo "* Using Azure subscription from hubfile"
    AZ_OPTS="$AZ_OPTS --subscription $AZURE_SUBSCRIPTION_ID"
  fi
fi

if test -z "$AZURE_SUBSCRIPTION_ID" -a -n "$ARM_SUBSCRIPTION_ID"; then
  echo "* Using Azure subscription from ARM_SUBSCRIPTION_ID"
  AZURE_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
  AZ_OPTS="$AZ_OPTS --subscription $ARM_SUBSCRIPTION_ID"
else
  AZURE_SUBSCRIPTION_ID="$(az account list --query '[?isDefault].id' -o tsv)"
  if test -n "$AZURE_SUBSCRIPTION_ID"; then
    echo "* Using Azure default subscription from azure config"
  else
    AZURE_SUBSCRIPTION_ID=$(az account show -o json | jq -r .id)
    if test -n "$AZURE_SUBSCRIPTION_ID"; then
      echo "* Using Azure subscription from account"
    fi
  fi
fi
if test -z "$AZURE_SUBSCRIPTION_ID"; then
  color error "Error: please run with option: $0 --azure-subscription SUBSCRIPTION_ID"
  exit 2
fi

printf "  Setting Azure subscription: "
color b "$AZURE_SUBSCRIPTION_ID"
resource_group="$(params value 'azure.resourceGroup')"
if test -z "$resource_group"; then
  resource_group_param="$(param_name AZURE_RESOURCE_GROUP_NAME)"
  if test -n "$resource_group_param"; then
    resource_group="$(params value "$resource_group_param")"
  fi
fi

if test -n "$resource_group"; then
  echo "* Using Azure resource group from hubfile"
else
  resource_group=${AZURE_RESOURCE_GROUP_NAME:-${AZURE_DEFAULTS_GROUP:-$AZURE_CONFIG_DEFAULTS_GROUP}}
  if test -n "$resource_group"; then
    echo "* Using Azure resource group from environment variables"
  else
    set +e
    resource_group=$(az config get defaults.group --query 'value' -o tsv 2>/dev/null)
    set -e
    if test -n "$resource_group"; then
      echo "* Using Azure resource group from azure config defaults.group"
    fi
  fi
fi

# If still no luck to discover the resource group, ask user to provide one
if test -z "$resource_group"; then
  groups="$(az group list --query '[].name' -o tsv)"
  if test -n "$groups"; then
    echo "List of available Azure Resource Groups:" | ident | color g
    echo "$groups" | ident | ident | color g
  fi
  suggestion="$(az group list --query '[0].name' | xargs)"
  ask env AZURE_RESOURCE_GROUP_NAME \
    -m "Azure Resource Group name" \
    --suggest "$suggestion" -random -empty
  AZURE_RESOURCE_GROUP_NAME=$(dotenv get AZURE_RESOURCE_GROUP_NAME)
else
  printf "  Setting Azure resource group: "
  color b "$resource_group"
  AZURE_RESOURCE_GROUP_NAME="$resource_group"
fi

if test -n "$AZURE_RESOURCE_GROUP_NAME"; then
  AZ_OPTS="$AZ_OPTS --resource-group $AZURE_RESOURCE_GROUP_NAME"
fi

export AZ_OPTS

# AZURE_REGION is already present?
if test -n "$AZURE_REGION"; then
  echo "* Using Azure location from envfile"
  location="$AZURE_REGION"
fi

# Trying to discover AZURE_REGION from hubfile
if test -z "$AZURE_REGION"; then
  AZURE_REGION="$(params value 'azure.location')"
  if test -z "$AZURE_REGION"; then
    region_param="$(param_name AZURE_REGION)"
    if test -n "$region_param"; then
      AZURE_REGION="$(params value "$region_param")"
    fi
    region_param="$(param_name AZURE_LOCATION)"
    if test -n "$region_param"; then
      AZURE_REGION="$(params value "$region_param")"
    fi
  fi
  if test -n "$AZURE_REGION"; then
    echo "* Using Azure location from hubfile"
    location="$AZURE_REGION"
  fi
fi

# Trying to discover AZURE_REGION from 'az defaults'
if test -z "$AZURE_REGION"; then
  # https://docs.microsoft.com/en-us/cli/azure/azure-cli-configuration
  # AZURE_DEFAULTS_* automatically recognized up by `az`
  eval "$(az configure --list-defaults | jq -r '.[] | "AZURE_CONFIG_DEFAULTS_" + (.name | ascii_upcase) + "=" + .value')"

  location=${AZURE_REGION:-${AZURE_DEFAULTS_LOCATION:-$AZURE_CONFIG_DEFAULTS_LOCATION}}
  if test -n "$location"; then
    echo "* Using Azure location from environment variables"
  else
    # shellcheck disable=SC2086
    location="$(az group show $AZ_OPTS -o tsv --query 'location')"
    if test -n "$location"; then
      echo "* Using Azure location from resource group $AZURE_RESOURCE_GROUP_NAME"
      AZURE_REGION="$location"
    else
      set +e
      location=$(az config get defaults.location --query 'value' -o tsv 2>/dev/null)
      set -e
      if test -n "$location"; then
        echo "* Using Azure location from azure config defaults.location"
        AZURE_REGION="$location"
      fi
    fi
  fi
fi

# TODO: if no AZURE_REGION has not been discovered by this point, ask user to type it in?
if test -z "$location"; then
  color error "Error: please run with option: $0 --azure-region REGION"
  exit 2
fi

printf "  Setting Azure location: "
color b "$location"
AZURE_REGION="$location"
AZURE_LOCATION="$location"
AZ_LOCATION_OPTS=""
if test -n "$AZURE_REGION"; then
  AZ_LOCATION_OPTS="--location $AZURE_REGION"
fi

# TODO state storage account per region?
echo "Configuring Azure Storage Account"
if test -z "$HUB_STATE_BUCKET"; then
  HUB_STATE_BUCKET="hubctl$(echo "$AZURE_SUBSCRIPTION_ID" | cut -d- -f1)"
fi
if test -z "$HUB_STATE_CONTAINER"; then
  HUB_STATE_CONTAINER=hubctl
fi

printf "* Checking presence of storage account %s: " "$resource_group/$HUB_STATE_BUCKET"
# shellcheck disable=SC2086
if az storage account show $AZ_OPTS -n "$HUB_STATE_BUCKET" -o none 2>/dev/null; then
  echo "exist"
else
  if $DRY_RUN; then
    echo "will be deployed"
  else
    echo "not found"
    echo "* Deploying storage account $resource_group/$HUB_STATE_BUCKET in $location location..."
    AZ_STORAGE_LOCATION_OPTS=$AZ_LOCATION_OPTS
    if test -n "$HUB_STATE_REGION"; then
      AZ_STORAGE_LOCATION_OPTS="--location $HUB_STATE_REGION"
    fi
    az storage account create $AZ_OPTS $AZ_STORAGE_LOCATION_OPTS --allow-blob-public-access false --sku 'Standard_ZRS' --kind 'StorageV2' -n "$HUB_STATE_BUCKET" -o none
  fi
fi
printf "* Checking presence of blob container %s: " "$HUB_STATE_CONTAINER"
if az storage container show --account-name "$HUB_STATE_BUCKET" -n "$HUB_STATE_CONTAINER" --auth-mode login -o 'none' 2>/dev/null; then
  echo "exist"
else
  if $DRY_RUN; then
    echo "will be deployed"
  else
    echo "not found"
    echo "* Deploying storage account $resource_group/$HUB_STATE_BUCKET blob container $HUB_STATE_CONTAINER..."
    # shellcheck disable=SC2086
    az storage container create $AZ_OPTS --account-name "$HUB_STATE_BUCKET" --auth-mode login --public-access off -n "$HUB_STATE_CONTAINER" -o none
  fi
fi

if ! $DRY_RUN; then
  # shellcheck disable=SC2086
  HUB_STATE_REGION="$(az storage account show $AZ_OPTS -n "$HUB_STATE_BUCKET" -o json | jq -r .location)"
fi

echo "Configuring Azure DNS"
printf "* Checking presence of zone %s: " "$HUB_DOMAIN_NAME"
# shellcheck disable=SC2086
ZONE_ID=$(az network dns zone show $AZ_OPTS -n "$HUB_DOMAIN_NAME" -o json 2>/dev/null | jq -r .id || true)
echo "${ZONE_ID:-not found}"

if $DRY_RUN; then
  echo "* Dry run mode detected: skipping DNS modification"
elif test -z "$has_dnsdomain_param"; then
  echo "* Skipping DNS setup due to neither dns.domain nor HUB_DOMAIN_NAME env variable defined"
  cat <<EOF | color green
  To manage DNS please add parameter to your hubfile:
  - name: dns.domain
    value: example.com
  Or to get autogenerated domain
  - name: dns.domain
    fromEnv: HUB_DOMAIN_NAME
EOF
elif test "$DNS_MANAGER" = "bubbles"; then
  if test -z "$ZONE_ID"; then
    echo "* Deploying zone $HUB_DOMAIN_NAME... "
    # shellcheck disable=SC2086
    az network dns zone create $AZ_OPTS -n "$HUB_DOMAIN_NAME" -o none
    echo "Done"
  fi
elif test "$DNS_MANAGER" = "user"; then
  PARENT_DOMAIN="$(echo "$HUB_DOMAIN_NAME" | cut -d. -f2-)"
  printf "* Checking presence of parent zone %s: " "$PARENT_DOMAIN"
  # shellcheck disable=SC2086
  PARENT_ZONE_ID=$(az network dns zone show $AZ_OPTS -n "$PARENT_DOMAIN" -o json 2>/dev/null | jq -r .id || true)
  echo "${PARENT_ZONE_ID:-not found}"
  if test -z "$ZONE_ID"; then
    if test -z "$PARENT_ZONE_ID"; then
      cat <<EOF | color error
Azure DNS zone $HUB_DOMAIN_NAME has not been found.

You can resolve this error by logging in https://portal.azure.com/ > DNS zones
and creating a zone "$HUB_DOMAIN_NAME" or "$PARENT_DOMAIN".

Then run again:

$ hubctl stack configure -r azure --domain-name $HUB_DOMAIN_NAME
EOF
      exit 5
    else
      echo "* Deploying zone $HUB_DOMAIN_NAME... "
      # shellcheck disable=SC2086
      az network dns zone create $AZ_OPTS --parent-name "$PARENT_DOMAIN" -n "$HUB_DOMAIN_NAME" -o none
      echo "Done"
      zone_just_created=1
    fi
  fi
  if test -n "$PARENT_ZONE_ID" -a -z "$zone_just_created"; then
    echo "* Updating $HUB_DOMAIN_NAME NS records in $PARENT_DOMAIN... "
    # TODO all add-record errors are suppressed for now
    # BadRequestError: Operation failed with status: 'Bad Request'. Details: The list of record sets of type 'NS' may not contain multiple entries with the same 'nsdname'
    # shellcheck disable=SC2086
    az network dns zone show $AZ_OPTS -n $HUB_DOMAIN_NAME -o json | jq -r .nameServers[] |
      xargs -n1 \
        az network dns record-set ns add-record $AZ_OPTS -z "$PARENT_DOMAIN" -n "$(echo "$HUB_DOMAIN_NAME" | cut -f1 -d.)" --if-none-match --ttl 300 -d 2>/dev/null || true
    echo "Done"
  fi
  # make sure .env file is up-to-date
  $dotenv set "HUB_DOMAIN_NAME=\"$HUB_DOMAIN_NAME\""
  $dotenv set "HUB_STACK_NAME=\"$(echo "$HUB_DOMAIN_NAME" | cut -f1 -d.)\""
  $dotenv set "HUB_BASE_DOMAIN_NAME=\"$(echo "$HUB_DOMAIN_NAME" | cut -f2- -d.)\""
else
  color error "Error: unsupported DNS operation"
  exit 6
fi

export HUB_CLOUD_PROVIDER=azure
$dotenv set 'HUB_CLOUD_PROVIDER' 'azure'

$dotenv contains 'HUB_STACK_NAME'            || $dotenv set 'HUB_STACK_NAME' "$HUB_STACK_NAME"
$dotenv contains 'HUB_DOMAIN_NAME'           || $dotenv set 'HUB_DOMAIN_NAME' "$HUB_DOMAIN_NAME"
$dotenv contains 'AZURE_REGION'              || $dotenv set 'AZURE_REGION' "$AZURE_REGION"
$dotenv contains 'AZURE_LOCATION'            || $dotenv set 'AZURE_LOCATION' "$AZURE_LOCATION"
$dotenv contains 'AZURE_RESOURCE_GROUP_NAME' || $dotenv set 'AZURE_RESOURCE_GROUP_NAME' "$AZURE_RESOURCE_GROUP_NAME"
$dotenv contains 'AZURE_SUBSCRIPTION_ID'     || $dotenv set 'AZURE_SUBSCRIPTION_ID' "$AZURE_SUBSCRIPTION_ID"
$dotenv contains 'ARM_SUBSCRIPTION_ID'       || $dotenv set 'ARM_SUBSCRIPTION_ID' "$AZURE_SUBSCRIPTION_ID"
$dotenv contains 'HUB_STATE_BUCKET'          || $dotenv set 'HUB_STATE_BUCKET' "$HUB_STATE_BUCKET"
$dotenv contains 'HUB_STATE_CONTAINER'       || $dotenv set 'HUB_STATE_CONTAINER' "$HUB_STATE_CONTAINER"
$dotenv contains 'HUB_STATE_REGION'          || $dotenv set 'HUB_STATE_REGION' "$HUB_STATE_REGION"
$dotenv contains 'HUB_TOOLBOX_IMAGE'         || $dotenv set 'HUB_TOOLBOX_IMAGE' 'ghcr.io/epam/hub-toolbox:azure'
$dotenv contains 'HUB_STACK_LS_SUPPRESS_WARN'|| $dotenv set 'HUB_STACK_LS_SUPPRESS_WARN' '1'

if test "$DNS_MANAGER" = "bubbles"; then
  echo "* Sending dns propagation request to bubbles with domain zone: $HUB_DOMAIN_NAME"
  bubbles_update="$(files -e find-in-path bubble-dns/update)"
  ns_script="$(files -e find-in-path files find-in-path azure/dns/nameservers)"
  ns_opts="--domain-name $HUB_DOMAIN_NAME --bubbles-secret-key $HUB_DOMAIN_SECRET"
  for ns in $($ns_script --domain-name "$HUB_DOMAIN_NAME"); do
    echo "  - $ns"
    ns_opts="$ns_opts -ns $ns"
  done
  # shellcheck disable=SC2086
  $bubbles_update $ns_opts
# AK: remove this comment as curretnly misleading until we will resolve back 72 hours
#   cat <<EOF | color green
#   DNS record has time to live: 72 hours

#   Hint! To refresh DNS: hubctl configure -r azure --dns-update

# EOF
fi

STACK=${STACK:-$(basename "$(pwd)")}
if test -z "$HUB_STATE"; then
  echo "* Setting hubctl state file location"
  HUB_STATE_FILE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
  if ! $PREFER_LOCAL_STATE; then
    HUB_STATE_FILE="$HUB_STATE_FILE,az://$HUB_STATE_BUCKET/$HUB_STATE_CONTAINER/$HUB_DOMAIN_NAME/hubctl/$STACK/hub.state"
  fi
  $dotenv set 'HUB_STATE' "$HUB_STATE_FILE"
fi
if test -z "$HUB_ELABORATE"; then
  echo "* Setting hubctl elaborate file location"
  HUB_ELABORATE_FILE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.elaborate"
  if ! $PREFER_LOCAL_STATE; then
    HUB_ELABORATE_FILE="$HUB_ELABORATE_FILE,az://$HUB_STATE_BUCKET/$HUB_STATE_CONTAINER/$HUB_DOMAIN_NAME/hubctl/$STACK/hub.elaborate"
  fi
  $dotenv set 'HUB_ELABORATE' "$HUB_ELABORATE_FILE"
fi
