#!/bin/bash -e
# shellcheck disable=SC2046,SC2068,SC2064,SC2086

HUB_HOME=${HUB_HOME:-$(dirname "$0")}

usage() {
  cat << EOF
Reads configuration information in ${HUB_FILES:-hub.yaml} and configures stack for deployment.

The result of configuration is saved under ".hub/env/" with a symlink ".env" pointing
to the current configuration.

Usage:
  hub configure -f hub.yaml <parameters>

Common parameters:
  -f  --file              Path to stack definition file (can be repeated multiple times)
  -r  --requirement       Configure one requirement (can be repeated multiple times)
  -i  --init-dotenv FILE  Start with initial values from the .env FILE
  -s  --silent            Suppress console outputs in favor of result codes
  -V  --verbose           Verbose outputs for debug purposes
  -h  --help              Print this message

Use: hub configure -r aws -r kubernetes   # configure specified requirements only

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    local configure
    if test -f "$WORKDIR/.hub/$req/configure"; then
      configure="$WORKDIR/.hub/$req/configure"
    elif test -f "$HUB_HOME/$req/configure"; then
      configure=$HUB_HOME/$req/configure
    else
      continue
    fi
    $configure --help
  done
}

# find_up () {
#   path=$(pwd)
#   while [[ "$path" != "" && ! -e "$path/$1" ]]; do
#     path=${path%/*}
#   done
#   echo "$path/$1"
# }

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
HUB_FILES=""
dotenv=$HUB_HOME/env/dotenv

if test -f ".env"; then
  eval $($dotenv export -f ".env" )
fi

while [ "$1" != "" ]; do
  case $1 in
    -f | --file )
      shift
      HUB_FILES=$(echo "$HUB_FILES $1" | xargs)
      ;;
    # -C | --workdir )
    #   shift
    #   WORKDIR=$1
    #   ;;
    --profile )
      shift
      HUB_DEPLOY_PROFILE="$1"
      ;;
    -r | --requirement )
      shift
      REQS=$(echo "$REQS $1" | xargs)
      ;;
    -i | --init-dotenv )
      shift
      INIT_DOTENV="$1"
      ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

if $VERBOSE; then
  set -x
fi

if test -z "$HUB_FILES"; then
  cat << EOF

Error: cannot find hub definition files

Full usage info:
  hub configure -f hub.yaml --help

Example:
  hub configure -f hub.yaml

EOF
  exit 1
fi

if test -n "$INIT_DOTENV" -a ! -f "$INIT_DOTENV"; then
  echo "Error: init dotenv $INIT_DOTENV file not found"
  exit 1
fi

TEMP_FILES=""
temp_file(){
  local temp
  temp=$(mktemp) || exit 1
  TEMP_FILES="$TEMP_FILES $temp"
  echo $temp
}

download_file() {
  if test -f "$2"; then
    return
  fi

  local temp http_code
  temp=$(temp_file)
  echo "  Downloading $(basename $2) from: $1"
  http_code=$(
    curl -sLo "$temp" -w "%{http_code}" "$1"
  )
  if test "$(echo $http_code | cut -c1-1)" != "2"; then
    echo "Error downloading url: $http_code"
    cat $temp
    return $http_code
  fi
  if test ! -s "$temp"; then
    echo "Error: have got empty file (url: $temp)"
    return 1
  fi
  echo -n "  Saving to $(pwd): "
  $HUB_HOME/env/copy "$temp" "$2"
}

KNOWN_URLS=""
EXPANDED=""
expand_hub_files() {
  local f included local_file
  for f in $@; do
    if grep -q "$f" <<< "$EXPANDED"; then
      continue
    fi
    if test -f "$f"; then
      EXPANDED=$(echo "$EXPANDED $f" | xargs)
      $HELP || echo "* File $f: exist"
      included=$(cat "$f" | yq e '.extensions.include.[]' -)
      if test -n "$included"; then
        expand_hub_files $included
      fi
      continue
    fi
    # is url
    if echo "$f" | grep -e '^https\?://' >/dev/null 2>&1; then
      local_file="$WORKDIR/$(basename "$f")"
      if test ! -f "$local_file"; then
        download_file "$f" "$local_file"
        KNOWN_URLS=$(dirname $f | xargs)
      fi
      expand_hub_files "$local_file"
      continue
    fi

    for url in $KNOWN_URLS; do
      # shellcheck disable=SC2001
      if download_file "$url/$1" "$WORKDIR/$1"; then
        expand_hub_files "$WORKDIR/$1"
        break
      fi
    done

    if test ! -f "$f"; then
      echo "Error: $f not found!"
      exit 1
    fi
  done
}

update_symlink() {
  if test -L "$2" && test $(readlink -n "$2") != "$1"; then
    unlink "$2"
  fi
  if test ! -f "$2"; then
    ln -sf "$1" "$2"
    echo "* Updated .env link to $(basename $1)"
  fi
}

finalize() {
  # shellcheck disable=SC2046
  local rv=$?
  local profiles
  if test -d "$WORKDIR/.hub/profiles"; then profiles="$profiles $(ls "$WORKDIR/.hub/profiles")"; fi
  if test -d "$HUB_HOME/profiles"; then profiles="$profiles $(ls $HUB_HOME/profiles)"; fi
  echo "Finalizing env files..."
  TEMP1=$(temp_file)
  TEMP2=$(temp_file)
cat << EOF >> $TEMP2
  # stack definition files
  HUB_FILES="$NEW_HUB_FILES"
  # deploy profiles are: $(echo "$profiles" | xargs)
  HUB_DEPLOY_PROFILE="$HUB_DEPLOY_PROFILE"
EOF
  MERGE_FILES="$MERGE_FILES -f $TEMP2"
  # shellcheck disable=SC2001
  $dotenv merge $MERGE_FILES > $TEMP1
  HUB_DOMAIN_NAME=$($dotenv -f "$TEMP1" get "HUB_DOMAIN_NAME" --default "$HUB_DOMAIN_NAME")
  echo -n "* Saving configuration to .hub/env/$HUB_DOMAIN_NAME.env: "
  $HUB_HOME/env/copy "$TEMP1" "$WORKDIR/.hub/env/$HUB_DOMAIN_NAME.env"
  update_symlink ".hub/env/$HUB_DOMAIN_NAME.env" "$WORKDIR/.env"
  echo
  if test "$rv" = "0"; then
    echo "Done!"
  else
    echo "See error above!"
  fi
  exit $rv
}

if test -z "$WORKDIR"; then
  first=$(echo "$HUB_FILES" | awk '{print $1;}')
  if test -f $first; then
    WORKDIR=$(dirname "$FIRST_FILE")
  else
    WORKDIR=$(pwd)
  fi
fi

if test ! -d $WORKDIR; then
  mkdir -p "$WORKDIR"
fi

$HELP || echo "Checking hub files:"
expand_hub_files $HUB_FILES
HUB_FILES="$EXPANDED"
if test -z "$HUB_FILES"; then
  cat << EOF
Cannot find hub files! Please same command with -f option

Example:
  hub configure -f hub.yaml
or
  hub configure -f https://raw.githubusercontent.com/agilestacks/stack-ml-eks/master/hub.yaml

EOF
  usage
fi

mkdir -p "$WORKDIR/.hub/env"


# common environment variables that
# will be used by exact extensions
export WORKDIR SILENT VERBOSE HUB_FILES HUB_HOME KUBECONFIG
if test -z "$REQS"; then
  for f in $HUB_FILES; do
    test -f $f || continue;
    REQS="$REQS $(cat "$f" | yq e '.extensions.configure.[]' -)"
  done
  REQS=$(echo "$REQS" | xargs -n1)
fi

if $HELP; then
  usage "$REQS"
  exit
fi

if test -z "$HUB_DEPLOY_PROFILE"; then
  HUB_DEPLOY_PROFILE="local"
  # We don't want run pod if inside of the pod
  if test ! -f "/var/run/secrets/kubernetes.io/serviceaccount/token"; then
    for f in $HUB_FILES; do
      test -f $f || continue;
      r=$(yq e . hub.yaml -j | jq -r '.requires? | select(type=="array")[] | select(. == "kubernetes")')
      if test "$r" = "kubernetes"; then
        HUB_DEPLOY_PROFILE="pod"
        break
      fi
    done
  fi
fi

NEW_HUB_FILES="$HUB_FILES"
trap 'finalize $?' EXIT

MERGE_FILES=""

if test -n "$INIT_DOTENV"; then
  echo "Using $INIT_DOTENV as initial configuration"
  eval $($dotenv export -f "$INIT_DOTENV")
  MERGE_FILES="$MERGE_FILES -f $INIT_DOTENV"
fi

if test -f "$WORKDIR/.env"; then
  echo "Configuration .env file: exist"
  eval $($dotenv export -f "$WORKDIR/.env")
  if test -n "$HUB_CLOUD_PROVIDER"; then echo "* Cloud provider: $HUB_CLOUD_PROVIDER"; fi
  if test -n "$HUB_DOMAIN_NAME"; then echo "* Stack domain name: $HUB_DOMAIN_NAME"; fi
  if test -L "$WORKDIR/.env"; then
    MERGE_FILES="-f $(readlink -n "$WORKDIR/.env") $MERGE_FILES"
  else
    MERGE_FILES="-f $WORKDIR/.env $MERGE_FILES"
  fi
else
  echo "Configuration .env file: to be created"
fi

echo "* Deployment profile: $HUB_DEPLOY_PROFILE"

for req in $(echo "$REQS" | xargs -n1); do
  if test -f "$WORKDIR/.hub/$req/configure"; then
    configure="$WORKDIR/.hub/$req/configure"
  elif test -f "$HUB_HOME/$req/configure"; then
    configure="$HUB_HOME/$req/configure"
  else
    echo "* Cannot find configure script for \"$req\": skipping"
    continue
  fi
  TEMP=$(temp_file)
  if ! $configure --output "$TEMP" $ARGS; then
    cat << EOF

Error: "$req" completed with error!

For troubleshooting:
  hub configure -r "$req" --verbose

For additional options:
  hub configure -r "$req" --help

EOF
    exit 4
  fi
  if test -s "$TEMP"; then
    eval $($dotenv export -f "$TEMP")
    MERGE_FILES="$MERGE_FILES -f $TEMP"
  fi
done
