#!/bin/bash -e
# Copyright (c) 2022 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2046,SC2068,SC2064,SC2086

HUB_HOME="${HUB_HOME:-$(dirname "$0")}"
HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
HUB_EXTENSION="$(basename "$0" | sed 's/-/ /g')"
PATH="$HUB_HOME:$HUB_HOME/bin:$HUB_WORKDIR:$HUB_WORKDIR/bin:$PATH"
export PATH

ident() {
  sed 's/^/  /'
}

usage() {
  cat << EOF
Reads configuration information in ${HUB_FILES:-hub.yaml} and configures stack for deployment.

The result of configuration is saved under ".hub/env/" with a symlink ".env" pointing
to the current configuration.

Usage:
  $HUB_EXTENSION [-r requirement]

Common parameters:
      --profile           Set specific deployment profile
  -V  --verbose           Verbose outputs for debug purposes
  -h  --help              Print this message

Use: $HUB_EXTENSION
     $HUB_EXTENSION -r env # to reconfigure only environment variables

Usage for stack requirements: [$(echo "$1" | xargs)]

EOF
  for req in $1; do
    if echo "$2" | grep -oh "\w*$req\w*"; then
      continue
    fi
    local configure
    if test -f "$HUB_WORKDIR/.hub/$req/configure"; then
      configure="$HUB_WORKDIR/.hub/$req/configure"
    elif test -f "$HUB_HOME/$req/configure"; then
      configure=$HUB_HOME/$req/configure
    else
      continue
    fi
    $configure --help
  done
}

real_files() {
  for f in $@; do
    if test -f "$f"; then
      echo -n " $f"
    fi
  done
  echo
}

VERBOSE=false
SILENT=false
HELP=false
ARGS=$*
HUB_FILES=""

if test -f ".env"; then
  eval $(dotenv export -f ".env" )
fi

while [ "$1" != "" ]; do
  case $1 in
    -f | --file )
      shift
      cat << EOF | color w
Warning: "$HUB_EXTENSION --file $1" has been deprecated. It will be removed in the future releases
Please use:
  hubctl stack init --file $1
EOF
      HUB_FILES=$(echo "$HUB_FILES $1" | xargs)
      ;;
    --profile )
      shift
      HUB_DEPLOY_PROFILE="$1"
      ;;
    -r | --requirement )
      shift
      REQS=$(echo "$REQS $1" | xargs)
      ;;
    # -i | --init-dotenv )
    #   shift
    #   INIT_DOTENV="$1"
    #   ;;
    -S | --silent )
      SILENT=true
      ;;
    -V | --verbose )
      VERBOSE=true
      ;;
    -h | --help )
      HELP=true
      ARGS="--help"
      ;;
  esac
  shift
done

if $VERBOSE; then
  set -x
fi

# if test -n "$INIT_DOTENV" -a ! -f "$INIT_DOTENV"; then
#   echo "Error: init dotenv $INIT_DOTENV file not found"
#   exit 1
# fi

TEMP_FILES=""
temp_file(){
  local temp
  temp=$(mktemp) || exit 1
  TEMP_FILES="$TEMP_FILES $temp"
  echo $temp
}

update_symlink() {
  if test -L "$2" && test $(readlink -n "$2") != "$1"; then
    unlink "$2"
  fi
  if test ! -f "$2"; then
    ln -sf "$1" "$2"
    echo "* Updated .env link to $(basename $1)"
  fi
}

finalize() {
  # shellcheck disable=SC2046
  local rv=$?
  local profiles
  if test "$rv" != "0"; then
    cat << EOF | color e
See error above!

Configuration has been reverted!
EOF
    exit $rv
  fi
  if test -d "$HUB_WORKDIR/.hub/profiles"; then profiles="$profiles $(ls "$HUB_WORKDIR/.hub/profiles")"; fi
  if test -d "$HUB_HOME/profiles"; then profiles="$profiles $(ls $HUB_HOME/profiles)"; fi
  HUB_DOMAIN_NAME=$(dotenv get "HUB_DOMAIN_NAME" --default "$HUB_DOMAIN_NAME")
  HUB_STACK_NAME=$(dotenv get "HUB_STACK_NAME" --default "$HUB_STACK_NAME")
  if test -n "$HUB_DOMAIN_NAME"; then
    dotenv_file="$(files abspath .hub/env/$HUB_DOMAIN_NAME.env)"
  elif test -n "$HUB_STACK_NAME"; then
    dotenv_file="$(files abspath .hub/env/$HUB_STACK_NAME.env)"
  else
    dotenv_file="$(files abspath .hub/env/.env)"
  fi
  if test "$(files abspath $DOT_ENV)" != "$dotenv_file"; then
    echo "Saving configuration as: $(basename "$dotenv_file")"
    if files copy "$DOT_ENV" "$dotenv_file" | ident; then
      echo "* Removing old: $DOT_ENV"
      update_symlink "$dotenv_file" "$HUB_WORKDIR/.env"
      rm -rf "$DOT_ENV"
    fi
  fi

  cat <<EOF | color g
Done!

Next step: start deploy or undeploy operations

Run:
  hubctl stack deploy
or:
  hubctl stack undeploy

EOF
}

if test -z "$HUB_WORKDIR"; then
  FIRST_FILE="$(echo "$HUB_FILES" | awk '{print $1;}')"
  if test -f $FIRST_FILE; then
    HUB_WORKDIR=$(dirname "$FIRST_FILE")
  else
    HUB_WORKDIR=$(pwd)
  fi
fi

if test ! -d $HUB_WORKDIR; then
  mkdir -p "$HUB_WORKDIR"
fi

export HUB_WORKDIR
if test -z "$HUB_FILES"; then
  cat << EOF
Cannot find hubctl files! Please run "hubctl stack init"

Example:
  hubctl stack init -f hub.yaml
or
  hubctl stack init -f https://raw.githubusercontent.com/agilestacks/stack-ml-eks/master/hub.yaml

EOF
  exit 1
fi

mkdir -p "$HUB_WORKDIR/.hub/env"

WORKDIR="$HUB_WORKDIR"

# common environment variables that
# will be used by exact extensions
export WORKDIR SILENT VERBOSE HUB_FILES HUB_HOME KUBECONFIG HUB_WORKDIR
if test -z "$REQS"; then
  REQS="$(yq e '' $HUB_FILES -o json | jq -cMr 'select(.extensions).extensions | select(.configure).configure[]')"
fi

if $HELP; then
  usage "$REQS"
  exit
fi

HUB_FILES="$(real_files $HUB_FILES)"
export HUB_FILES
trap 'finalize $?' EXIT

if test -f "$HUB_WORKDIR/.env"; then
  echo "Configuration .env file: exist"
  if test -L "$HUB_WORKDIR/.env"; then
    DOT_ENV="$(readlink -n "$HUB_WORKDIR/.env")"
  else
    DOT_ENV="$HUB_WORKDIR/.env"
  fi
  export DOT_ENV
  eval $(dotenv export -f "$HUB_WORKDIR/.env")
  if test -n "$HUB_CLOUD_PROVIDER"; then
    echo "* Cloud provider: $HUB_CLOUD_PROVIDER";
  fi
else
  cat << EOF | color e
Error: cannot find .env file

Did you run?
  hubctl stack init
EOF
  exit 1
fi

for req in $(echo "$REQS" | xargs -n1); do
  if test -x "$HUB_WORKDIR/$req"; then
    configure="$HUB_WORKDIR/$req"
  else
    configure=$(files find-in-path "$req/configure")
  fi
  if test -z "$configure"; then
    color warn "* Warning: cannot find configure script for \"$req\""
    continue
  fi

  echo -n "Running configuration for: "
  color b "$req"
  if $configure --output "$DOT_ENV" $ARGS; then
    eval $(dotenv export -f "$DOT_ENV")
  else
    cat << EOF | color e

Error: "$req" completed with error!

For troubleshooting:
  $HUB_EXTENSION -r "$req" --verbose

For additional options:
  $HUB_EXTENSION -r "$req" --help

EOF
    exit 4
  fi
done

if ! dotenv contains "HUB_DEPLOY_PROFILE"; then
  if test -n "$HUB_DEPLOY_PROFILE"; then
    HUB_DEPLOY_PROFILE="local"
  fi

  # We don't want run pod if inside of the pod
  if test ! -f "/var/run/secrets/kubernetes.io/serviceaccount/token"; then
      r="$(yq e '' $HUB_FILES -o=json | jq -cMr --arg a "kubernetes" '.requires|select(.)[]|select(.==$a)')"
      if test -n "$r"; then
        HUB_DEPLOY_PROFILE="pod"
      fi
  fi
  BRIEF="Deployment profile used to execute automation
- local: run everything locally
- toolbox: run a docker container with all tools inside in interactive shell
- pod: to run a toolbox container as a kubernetes pod
See: https://github.com/agilestacks/hub-extensions/blob/gcp-extensions/documentation/hub-stack-deploy.md#deployment-profiles"
  ask env HUB_DEPLOY_PROFILE -m "deployment profile" -a "hub.deploymentProfile" --suggest "$HUB_DEPLOY_PROFILE" --brief "$BRIEF"
fi

if files find-in-path "profiles/$HUB_DEPLOY_PROFILE" -e >/dev/null; then
  echo "* Deployment profile: $HUB_DEPLOY_PROFILE"
else
  color e "Error: cannot find deployment profile: $HUB_DEPLOY_PROFILE" | ident
  exit 44
fi

dotenv set "HUB_TTY" "${HUB_TTY:-false}"
dotenv set "HUB_FILES" "$HUB_FILES"

if ! dotenv contains "HUB_STATE"; then
  echo "* Setting hubctl state to local file"
  dotenv set "HUB_STATE" "$(files abspath ".hub/$HUB_DOMAIN_NAME.state")"
fi

if ! dotenv contains "HUB_ELABORATE"; then
  echo "* Setting hubctl elaborate to local file"
  dotenv set  "HUB_ELABORATE" "$(files abspath ".hub/$HUB_DOMAIN_NAME.elaborate")"
fi
