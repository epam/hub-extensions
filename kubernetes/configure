#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2086,SC2064,SC2046

usage() {
cat << EOF
Kubernetes parameters:
  --kubeconfig            Path to the kubeconfig. If not specified then use kubectl's default
  --kubecontext           Name of Kubernetes context in Kubeconfig file
                          "_" reserved for "current context"
  --current-kubecontext   Use current kubecontext (this is the default)

Use: $HUB_EXTENSION [--kubecontext _] or [--current-kubecontext] for current kubecontext

EOF
}

DOT_ENV=${DOT_ENV:-".env"}
while [ "$1" != "" ]; do
  case "$1" in
    --kubeconfig )
      shift
      KUBECONFIG="$1"
      export KUBECONFIG
      ;;
    --kubecontext )
      shift
      KUBECONTEXT="$1"
      ;;
    --current-kubecontext )
      KUBECONTEXT="_"
      ;;
    -o | --output )
      shift
      DOT_ENV="$1"
      ;;
    --help )
      usage
      exit
      ;;
  esac
  shift
done

VERBOSE=${VERBOSE:-false}
if test "$VERBOSE" = "true"; then
  set -x
fi

if test -z "$HUB_DOMAIN_NAME"; then
  HUB_DOMAIN_NAME="$(dotenv get "HUB_DOMAIN_NAME")"
fi


TEMP=$(mktemp || exit 1)
trap "rm -f $TEMP" EXIT


echo "Configuring Kubernetes"
if test -z "$KUBECONTEXT"; then
  KUBECONTEXT="$(params value "kubernetes.context")"
  if test -n "$KUBECONTEXT"; then
    printf "* Using context set by kubernetes.context parameter: "
    color b "$KUBECONTEXT"
  fi
fi

if test -z "$KUBECONTEXT"; then
  echo "* Using current context from kubeconfig"
  KUBECONTEXT="_"
fi

if test -f "$HUB_KUBECONFIG" && kubeconfig test -c "$KUBECONTEXT" -f "$HUB_KUBECONFIG"; then
  printf "* Using kubeconfig from env: "
  color b "HUB_KUBECONFIG"
  kubeconfig cp -e -c "$KUBECONTEXT" -f "$HUB_KUBECONFIG" -o "$TEMP" > /dev/null 2>&1
elif test -f "$KUBECONFIG" && kubeconfig test -c "$KUBECONTEXT" -f "$KUBECONFIG"; then
  printf "* Using kubeconfig from env: "
  color b "KUBECONFIG"
  kubeconfig cp -e -c "$KUBECONTEXT" -f "$KUBECONFIG" -o "$TEMP" > /dev/null 2>&1
elif test -f "$HOME/.kube/config" && kubeconfig test -c "$KUBECONTEXT" -f "$HOME/.kube/config"; then : #pass
  printf "* Using kubeconfig from default location: "
  color b "\$HOME/.kube/config"
  kubeconfig cp -e -c "$KUBECONTEXT" -f "$HOME/.kube/config" -o "$TEMP" > /dev/null 2>&1
elif $(dirname $0)/configure-local-sa --save-to "$TEMP"; then : #pass
  printf "* Using kubeconfig service account"
else
  color w "Cannot configure kubeconfig. This may be ok if one of the components provides kubernetes"
  echo "TODO: implement check for this case"
fi

printf "* Setting up shared location for kubernetes "
color b ".hub/env/$HUB_DOMAIN_NAME.kubeconfig"
copy "$TEMP" "$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.kubeconfig"
chmod go-rw "$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.kubeconfig"
dotenv set "HUB_KUBECONFIG" "$(files abspath $HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.kubeconfig)"
