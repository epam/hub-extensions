#!/bin/sh -e
# Copyright (c) 2022 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

HUB_WORKDIR="${HUB_WORKDIR:-$(pwd)}"
dotenv="dotenv -f $HUB_WORKDIR/.env"

hubctl="$(which hubctl 2>/dev/null || true)"
if test -z "$hubctl"; then
  # backward compatibility
  hubctl="$(which hub 2>/dev/null || true)"
fi
if test -z "$hubctl"; then
  color error "hubctl not found in PATH. Please install hubctl first."
  exit 1
fi

checkCluster() {
  _checkCluster_KUBECONTEXT=
  if test -n "$1";then
    _checkCluster_KUBECONTEXT="$1"
    export KUBECONFIG
    echo "* Trying kubeconfig: $_checkCluster_KUBECONTEXT"
  fi
  _checkCluster_KUBECONTEXT="$2"

  if test -z "$_checkCluster_KUBECONTEXT"; then
    _checkCluster_KUBECONTEXT="$(kubectl config current-context)"
  fi

  if test -z "$(kubectl config view -o json | jq ".contexts[] | select(.name==\"$_checkCluster_KUBECONTEXT\").name")"; then
    echo "* Context $_checkCluster_KUBECONTEXT: not found"
    return 1
  fi
  echo "* Context $_checkCluster_KUBECONTEXT: exist"

  printf "* Checking connectivty to %s: " "$_checkCluster_KUBECONTEXT"
  if kubectl cluster-info --context="$_checkCluster_KUBECONTEXT"> /dev/null; then
    echo "connected"
  else
    return $?
  fi
}

checkClusterAndSave() {
  if checkCluster "$1" "$HUB_DOMAIN_NAME"; then
    mkdir -p "$(dirname "$SAVETO")"
    "$(dirname "$0")/configure-kubeconfig" \
      --kubeconfig "$1" \
      --kubecontext "$HUB_DOMAIN_NAME" \
      --domain-name "$HUB_DOMAIN_NAME" \
      --save-to "$SAVETO"
    echo "* Saving HUB_KUBECONFIG configuration: $SAVETO"
    $dotenv set "HUB_KUBECONFIG=\"$SAVETO\""
  else
    return $?
  fi
}

if test ! -f "$HUB_WORKDIR/.env"; then
  color error "Error: cannot find .env file in $HUB_WORKDIR"
  exit 1
fi
eval "$($dotenv export)"

echo "Finalizing kubernetes deployment"

HUB_KUBECONFIG=$($dotenv get "HUB_KUBECONFIG")
HUB_DOMAIN_NAME=$($dotenv get "HUB_DOMAIN_NAME")
if test -n "$HUB_KUBECONFIG"; then
  echo "* File .env already provides HUB_KUBECONFIG: $HUB_KUBECONFIG"
  if checkCluster "$HUB_KUBECONFIG" "$HUB_DOMAIN_NAME"; then
    exit 0
  fi
else
  echo "* File .env does not provide HUB_KUBECONFIG"
fi

SAVETO="$HUB_WORKDIR/.hub/env/$HUB_DOMAIN_NAME.kubeconfig"
if test -f "$SAVETO"; then
  if checkClusterAndSave "$SAVETO"; then
    exit 0
  fi
else
  echo "* Kubeconfig $SAVETO: not found"
fi

if test -z "$HUB_STATE"; then
  HUB_STATE="$HUB_WORKDIR/.hub/$HUB_DOMAIN_NAME.state"
fi

cat << EOF
* Trying kubeconfig from state: $STATEFILE
* Running CLI command:

  $ hubctl kubeconfig -k $HUB_STATE -c $HUB_DOMAIN_NAME

EOF
{
  _kubeconfig="$KUBECONFIG"
  _temp=$(mktemp)
  export KUBECONFIG="$_temp"
  # shellcheck disable=SC2064
  trap "rm -f $_temp" EXIT
  if $hubctl kubeconfig -k "$HUB_STATE" -c "$HUB_DOMAIN_NAME"; then
    if checkClusterAndSave "$KUBECONFIG" ; then
      exit 0
    fi
  fi
  export KUBECONFIG="$_kubeconfig"
}

if test -n "$KUBECONFIG" && checkClusterAndSave "$KUBECONFIG" ; then
  exit 0
fi

if test -f "$HOME/.kube/config"; then
  if checkClusterAndSave "$HOME/.kube/config" ; then
    exit 0
  fi
else
  echo "Kubeconfig $HOME/.kube/config: not found"
fi

if test -d "/var/run/secrets/kubernetes.io/serviceaccount"; then
  echo "Trying from: /var/run/secrets/kubernetes.io/serviceaccount"
  _temp=$(mktemp)
  # shellcheck disable=SC2064
  trap "rm -f $_temp" EXIT
  "$(dirname "$0")/configure-local-sa" --domain-name "$HUB_DOMAIN_NAME" --save-to "$_temp"
  if checkClusterAndSave "$_temp"; then
    exit 0
  fi
fi

color error "Error: unable to configure kubeconfig!"
exit 1
