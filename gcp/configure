#!/bin/bash -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2090

usage() {
    cat <<EOF
GCP parameters:
  --gcp-project-id               GCP project ID (default to GOOGLE_PROJECT)
  --gcs-bucket-name              GCS bucket name (defaults to GOOGLE_PROJECT_superhub)
  --domain-name                  Domain name of the stack (we get one from bubble dns if not set)
  --disable-dnssec               Disable DNSSEC for the domain
EOF
}

ident() {
  sed 's/^/  /'
}

check_api_enabled() {
  gcloud services list --enabled --filter "name:($1)" --format="value(config.name)"  >/dev/null 2>&1
}

jq='jq -cM'
# shellcheck disable=SC2089
# curl='curl -isH "Metadata-Flavor: Google"'
dotenv="dotenv -f $DOT_ENV"
DNSSEC_STATE="on"
while [ "$1" != "" ]; do
    case $1 in
    --gcs-bucket-name)
        shift
        HUB_STATE_BUCKET="$1"
        ;;
    --gcp-project-id)
        shift
        GOOGLE_PROJECT="$1"
        ;;
    --force)
        FORCE_FUNCTION_UPDATE=1
        ;;
    --domain-name)
        shift
        HUB_DOMAIN_NAME="$1"
        ;;
    --disable-dnssec )
        shift
        DNSSEC_STATE="off"
        ;;
    esac
    shift
done

if test "$VERBOSE" = "true"; then
	set -x
fi

HUB_CLOUD_PROVIDER="gcp"
export HUB_CLOUD_PROVIDER

echo -n "Setting current GCP project to: "
color b "$GOOGLE_PROJECT"
echo "* $(gcloud config set project "$GOOGLE_PROJECT" -q 2>&1)"

# shellcheck disable=SC1091
if test -z "$(params env HUB_DOMAIN_NAME)"; then
  stack_name_param=$(params env "HUB_STACK_NAME" | jq -cMr '.name | select(.)')
  if test -n "$stack_name_param"; then
    HUB_STACK_NAME="$(params value "$stack_name_param" -d "$DOT_ENV" -d "$HUB_WORKDIR/.env")"
    if test -z "$HUB_STACK_NAME"; then
      echo -n "Generating new stack name: "
      new_name="$(files find-in-path bubble-dns/new-name)"
      HUB_STACK_NAME="$(eval "$new_name" | cut -d. -f1)"
      color b "$HUB_STACK_NAME"
      echo "* Saving also as HUB_DOMAIN_NAME for compatibiltiy"
      HUB_DOMAIN_NAME="$HUB_STACK_NAME"
      cat << EOF | color g
  If you want to enable domain name generation. Please add following parameter to your hubfile
  - name: dns.domain
    fromEnv: HUB_DOMAIN_NAME
EOF
    else
      echo -n "Using stack name: "
      color b "$HUB_STACK_NAME"
      HUB_DOMAIN_NAME="$HUB_STACK_NAME"
    fi
  else
    color e "  Cannot find neither HUB_STACK_NAME neither HUB_STACK_DOMAIN_NAME in hubfile"
    cat << EOF | color g
  You may want to add one parameter or both to your hubfile
  - name: dns.domain
    fromEnv: HUB_DOMAIN_NAME
  - name: dns.name
    fromEnv: HUB_STACK_NAME

EOF
  exit 1
  fi
else
  echo "Configuring DNS"
  HUB_STACK_NAME="$(params value "$stack_name_param" -d "$DOT_ENV" -d "$HUB_WORKDIR/.env")"
  if test -z "$HUB_DOMAIN_NAME"; then
    echo "* Requesting new DNS name"
    # shellcheck disable=SC1090
    source "$(dirname "$0")/../bubble-dns/include"
    configureBubbleDNS
  fi
  echo -n "* Enabling API for dns.googleapis.com... "
  gcloud services enable "dns.googleapis.com" && echo "done"
  echo -n "* Cloud DNS Zone "
  color -n b "$HUB_DOMAIN_NAME... "
  FOUND=$(gcloud dns managed-zones list --filter=dnsName:"$HUB_DOMAIN_NAME" \
    --format json | $jq '. | length' | xargs)
  if test "$FOUND" == "0"; then
    echo "not found"
    echo "  Creating (takes a minute)... "
    gcloud dns managed-zones create "$(echo "$HUB_DOMAIN_NAME" | cut -d. -f1)" \
      --description="Managed by hubctl" \
      --dnssec-state="$DNSSEC_STATE" \
      --no-log-dns-queries \
      --dns-name="$HUB_DOMAIN_NAME" 2>&1 | ident;
  else
    echo "found"
  fi
fi

if dotenv contains HUB_DOMAIN_SECRET; then
  echo "* Sending dns propagation request to bubbles with domain zone: $HUB_DOMAIN_NAME"
  ns_script="$(files -e find-in-path files find-in-path gcp/clouddns/nameservers)"
  ns_opts="--domain-name $HUB_DOMAIN_NAME --bubbles-secret-key $HUB_DOMAIN_SECRET"
  for ns in $($ns_script --domain-name "$HUB_DOMAIN_NAME"); do
    echo "  - $ns"
    ns_opts="$ns_opts -ns $ns"
  done

  bubbles_update="$(files -e find-in-path bubble-dns/update)"
  # shellcheck disable=SC2086
  $bubbles_update $ns_opts
fi

### State Bucket
if test -z "$HUB_STATE_BUCKET"; then
  HUB_STATE_BUCKET="superhub-$GOOGLE_PROJECT"
fi
echo -n "Configuring state storage: "
color b "gs://$HUB_STATE_BUCKET"
if gsutil -q ls -b "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1; then
  echo "* Bucket gs://$HUB_STATE_BUCKET already exist in $GOOGLE_PROJECT"
else
  echo -n "* Creating bucket gs://$HUB_STATE_BUCKET... "
	if gsutil mb -c standard -b on "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1; then
		echo "done"
	else
		color err "Error: Failed to create gs://$HUB_STATE_BUCKET bucket"
    exit 1
	fi
fi
gsutil label ch -l "managed-by":"hubctl" "gs://$HUB_STATE_BUCKET" > /dev/null 2>&1

HUB_STATE_FILE="$(files abspath ".hub/$HUB_DOMAIN_NAME.state"),gs://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/hub.state"
HUB_ELABORATE_FILE="$(files abspath ".hub/$HUB_DOMAIN_NAME.elaborate"),gs://$HUB_STATE_BUCKET/$HUB_DOMAIN_NAME/hub/hub.elaborate"

$dotenv contains 'HUB_CLOUD_PROVIDER'   || $dotenv set 'HUB_CLOUD_PROVIDER' "$HUB_CLOUD_PROVIDER"
$dotenv contains 'HUB_STATE_BUCKET'     || $dotenv set 'HUB_STATE_BUCKET' "$HUB_STATE_BUCKET"
$dotenv contains 'STATE_BUCKET'         || $dotenv set 'STATE_BUCKET' "$HUB_STATE_BUCKET"
$dotenv contains 'GOOGLE_PROJECT'       || $dotenv set 'GOOGLE_PROJECT' "$GOOGLE_PROJECT"
$dotenv contains 'GOOGLE_CLOUD_PROJECT' || $dotenv set 'GOOGLE_PROJECT' "$GOOGLE_PROJECT"
$dotenv contains 'HUB_DOMAIN_NAME'      || $dotenv set 'HUB_DOMAIN_NAME' "$HUB_DOMAIN_NAME"
$dotenv contains 'HUB_STATE'            || $dotenv set 'HUB_STATE' "$HUB_STATE_FILE"
$dotenv contains 'HUB_ELABORATE'        || $dotenv set 'HUB_ELABORATE' "$HUB_ELABORATE_FILE"
$dotenv contains 'HUB_TOOLBOX_IMAGE'    || $dotenv set 'HUB_TOOLBOX_IMAGE' 'ghcr.io/epam/hub-toolbox:gcp'

if test -n "$CLOUD_SHELL"; then
  echo "* Hubctl runs inside a Cloud Shell environment"
  echo "  Setting deploy profile to: local"
  $dotenv set "HUB_DEPLOY_PROFILE" "local"
fi
if test -z "$HUB_STACK_NAME" -a -n "$HUB_DOMAIN_NAME"; then
  HUB_STACK_NAME="$(echo "$HUB_DOMAIN_NAME" | cut -d. -f1)"
fi
if test -n "$HUB_STACK_NAME"; then
  $dotenv set "HUB_STACK_NAME" "$HUB_STACK_NAME"
fi
