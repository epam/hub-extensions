#!/bin/sh -e
# Copyright (c) 2023 EPAM Systems, Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://www.mozilla.org/en-US/MPL/2.0/.


usage() {
  cat <<EOF
GCP access flags:
      --gcp-project-id string                 Override GCP project ID (can be also defined via GOOGLE_PROJECT)
      --gcp-application-credentials string    Path to the google application credentials file (see: https://cloud.google.com/docs/authentication/getting-started, can be also defined via GOOGLE_APPLICATION_CREDENTIALS)
      --gcp-region string                     Override GCP region (can be also defined via GOOGLE_REGION)
      --gcp-zone' string                      Override GCP zone (can be also defined via GOOGLE_ZONE)
EOF
}

contains() {
  _contains_pattern="$1"
  _contains_result=
  shift

  # shellcheck disable=SC2048
  for w in $*; do
    if test "$w" = "$_contains_pattern"; then
      _contains_result="$w"
      break
    fi
  done
  test -n "$_contains_result"
}

ident() {
  sed 's/^/  /'
}

while [ "$1" != "" ]; do
  case $1 in
  --gcp-project-id)
    GOOGLE_PROJECT="$2"
    shift
    ;;
  --gcp-application-credentials)
    GOOGLE_APPLICATION_CREDENTIALS="$2"
    shift
    ;;
  --gcp-region)
    GOOGLE_REGION="$2"
    shift
  ;;
  --gcp-zone)
    GOOGLE_ZONE="$2"
    shift
  ;;
  -h | --help)
    usage
    exit 0
    ;;
  esac
  shift
done

VERBOSE=${VERBOSE:-"false"}
if test "$VERBOSE" = "true"; then
  set -x
fi
dotenv="dotenv -f $DOT_ENV"
# shellcheck disable=SC2089
curl="curl -isH 'Metadata-Flavor: Google'"
echo "Setting up credentials"
if test -n "$GOOGLE_PROJECT"; then
  echo "* Setting GCP project ID: defined via GOOGLE_PROJECT"
elif test -n "$GOOGLE_CLOUD_PROJECT"; then
  echo "* Setting GCP project ID: defined via GOOGLE_CLOUD_PROJECT"
  GOOGLE_PROJECT="$GOOGLE_CLOUD_PROJECT"
else
  gcloud_result="$(gcloud config list --format="json" | jq -cMr '.core.project | select(.)')"
  if test -n "$gcloud_result"; then
    ask env "GOOGLE_PROJECT" -m "GCP project ID" -a "projectId" --suggest "$gcloud_result" -t "gcloud" -random -empty
  else
    ask env "GOOGLE_PROJECT" -m "GCP project ID" -a "projectId" -random -empty
  fi
  GOOGLE_PROJECT="$(dotenv get GOOGLE_PROJECT)"
fi

active_projects="$(gcloud projects list --format='json' | jq -cMr '[.[]][] | select(.lifecycleState == "ACTIVE") | .projectId | select(.)')"
if ! contains "$GOOGLE_PROJECT" "$active_projects"; then
    cat <<EOF | ident | color warn
Warning: entered GCP project ID has not been listed in active projects.
This may be a simiple typo or intentionally

List of active projects:
$(echo "$active_projects" | ident)

Entered value: $GOOGLE_PROJECT

EOF
fi
echo "* $(gcloud config set project "$GOOGLE_PROJECT" -q 2>&1)"

dotenv set GOOGLE_PROJECT "$GOOGLE_PROJECT"
dotenv set GOOGLE_CLOUD_PROJECT "$GOOGLE_PROJECT"

if test -z "$GOOGLE_APPLICATION_CREDENTIALS"; then
  CREDS="$HOME/.config/gcloud/application_default_credentials.json"
  # shellcheck disable=SC2090
  if $curl 'http://metadata.google.internal' >/dev/null 2>&1; then
    echo "* The Hub CLI runs inside a Google Cloud environment using Environment-provided service account to talk to GCP"
  elif test -f "$CREDS"; then
    cat << EOF
* $CREDS file exists
  ADC (Application Default Credentials) will be used to authenticate requests to GCP
EOF
  else
    cat << EOF
* Since GOOGLE_APPLICATION_CREDENTIALS is not provided
  trying ADC (Application Default Credentials) to authenticate
  please give consent in the browser
EOF
    if gcloud auth application-default login 2>&1; then
      echo "* Consent has been given. $CREDS created"
    else
      color e "gcloud auth application-default login command failed" | ident
      exit 1
    fi
  fi
else
  echo "* Using application credentials: $GOOGLE_APPLICATION_CREDENTIALS"
  $dotenv set "GOOGLE_APPLICATION_CREDENTIALS" "$GOOGLE_APPLICATION_CREDENTIALS"
fi

# shellcheck disable=SC2090
if test -z "$GOOGLE_REGION"; then
  if $curl 'http://metadata.google.internal' >/dev/null 2>&1; then
    suggest_zone=$(basename "$($curl http://metadata.google.internal/computeMetadata/v1/instance/zone)")
    suggest_region="$(echo "$suggest_zone" | cut -d- -f1-2)"
  else
    suggest_region="$(gcloud config get-value "compute/region" 2> /dev/null)"
  fi
  if test -z "$suggest_region"; then
    suggest_region="us-central1"
  fi
  ask env "GOOGLE_REGION" -m "GCP region" -a "cloud.region" --suggest "$suggest_region"
else
  echo "* Saving GCP region $GOOGLE_REGION"
  dotenv set "GOOGLE_REGION" "$GOOGLE_REGION"
fi

# shellcheck disable=SC2090
if test -z "$GOOGLE_ZONE"; then
  if $curl 'http://metadata.google.internal' >/dev/null 2>&1; then
    suggest_zone=$(basename "$($curl http://metadata.google.internal/computeMetadata/v1/instance/zone)")
  else
    suggest_zone="$(gcloud config get-value "compute/zone" 2> /dev/null)"
  fi
  if test -z "$suggest_zone"; then
    suggest_zone="us-central1-a"
  fi
  ask env "GOOGLE_ZONE" -m "GCP zone" -a "cloud.zone" --suggest "$suggest_zone"
else
  echo "* Saving GCP zone $GOOGLE_ZONE"
  dotenv set "GOOGLE_ZONE" "$GOOGLE_ZONE"
fi
